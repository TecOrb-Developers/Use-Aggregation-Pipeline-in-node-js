"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var typescript_1 = __importDefault(require("typescript"));
var compilerHost_1 = __importDefault(require("./compilerHost"));
var util_1 = require("../lib/util");
var logger_1 = __importDefault(require("../lib/logger"));
var Compiler = /** @class */ (function () {
    function Compiler(configOptions, pathHost) {
        this.configOptions = configOptions;
        // this.compilerOptions = {
        //   module: ts.ModuleKind.CommonJS,
        //   moduleResolution: ts.ModuleResolutionKind.NodeJs,
        //   allowSyntheticDefaultImports: true,
        //   experimentalDecorators: true,
        //   resolveJsonModule: true,
        //   esModuleInterop: true,
        //   noImplicitAny: true,
        //   suppressImplicitAnyIndexErrors: true,
        //   // lib: ['lib.es5.d.ts', 'lib.es2015.d.ts', 'lib.es2017.d.ts'], 这个会与getDefaultFileName冲突，去掉这个可以默认使用lib.d.ts
        //   baseUrl: '',
        //   paths: {
        //     '~types/*': ['./typings/*'],
        //     '@test/*': ['./test/*']
        //   },
        //   sourceMap: true,
        //   inlineSourceMap: false,
        //   inlineSources: true,
        //   declaration: false,
        //   noEmit: false,
        //   outDir: '',
        //   configFilePath: '',
        //   target: 1,
        // };
        this.setCompilerOptions(configOptions.tsconfig.compilerOptions || {});
        this.pathHost = pathHost;
        this.root = configOptions.config.root;
    }
    Compiler.prototype.transformCompilerOptions = function (compilerOptions) {
        var newCompilerOptions = __assign(__assign({}, compilerOptions), { module: typescript_1["default"].ModuleKind[util_1.toLowerCase(compilerOptions.module)], moduleResolution: typescript_1["default"].ModuleResolutionKind.NodeJs, target: typescript_1["default"].ScriptTarget[util_1.toLowerCase(compilerOptions.target)] });
        delete newCompilerOptions.lib;
        return newCompilerOptions;
    };
    Compiler.prototype.setCompilerOptions = function (compilerOptions) {
        this.compilerOptions = this.transformCompilerOptions(compilerOptions);
    };
    Compiler.prototype.getCompilerHost = function (compilerOptions) {
        var host = this.compilerHost || new compilerHost_1["default"]({ tsconfig: { compilerOptions: compilerOptions }, config: { root: this.root } }, this.pathHost);
        if (!this.compilerHost) {
            // cache compiler host
            this.compilerHost = host;
        }
        return host;
    };
    Compiler.prototype.createIncrementalCompilerHost = function (compilerOptions) {
        // const host = ts.createCompilerHostWorker(options, /*setParentNodes*/ undefined, system);
        var typescript = typescript_1["default"];
        var system = typescript_1["default"].sys;
        var host = this.getCompilerHost(compilerOptions);
        host.createHash = typescript.maybeBind(system, system.createHash);
        typescript.setGetSourceFileAsHashVersioned(host, system);
        typescript.changeCompilerHostLikeToUseCache(host, function (fileName) { return typescript.toPath(fileName, host.getCurrentDirectory(), host.getCanonicalFileName); });
        return host;
    };
    Compiler.prototype.compile = function (code, fileName) {
        logger_1["default"].log('[compile]', code.slice(0, 8), fileName);
        // const host = ts.createIncrementalCompilerHost(this.config.options, ts.sys);
        // const host = createCompilerHost(config.options, moduleSearchLocations);
        // const program = ts.createIncrementalProgram({
        //   rootNames: [],
        //   options: this.config.options,
        //   host: host,
        // });
        // const host = new CompilerHost(this.config.options, []);
        var host = this.createIncrementalCompilerHost(this.compilerOptions);
        var program = typescript_1["default"].createIncrementalProgram({
            rootNames: [fileName],
            options: this.compilerOptions,
            host: host
        });
        // const program = ts.createProgram([fileName], this.config.options, host);
        var sourceFile = program.getSourceFile(fileName);
        // console.log('[source File about]', fileName, sourceFile.externalModuleIndicator.moduleSpecifier.text, Object.keys(sourceFile.externalModuleIndicator.moduleSpecifier));
        logger_1["default"].log('[source File about]', fileName, sourceFile.imports);
        this.pathHost.fast2absoluteWithAst(code, sourceFile);
        // console.log('source file', sourceFile)
        // const transformers = {
        //   before() {
        //     return {};
        //   }
        // }
        // const getCustomTransformers = () => {
        //   // console.log('getCustomTransformers')
        //   // if (typeof transformers === 'function') {
        //   //   const program = service.getProgram();
        //   //   return program ? transformers(program) : undefined;
        //   // }
        //   // return transformers;
        // };
        var output = [];
        // const emitResult =
        program.emit(sourceFile, function (path, file) {
            if (path.endsWith('.map')) {
                output[1] = file;
            }
            else {
                output[0] = file;
            }
            // if (options.emit) sys.writeFile(path, file, writeByteOrderMark);
        }, undefined, undefined, undefined);
        var diagnostics = program.getSemanticDiagnostics();
        this.reportError(this.formatDiagnostics(diagnostics));
        logger_1["default"].log('output', output[0]);
        // return sourceFile.text.replace('@', './').replace("import './test/b'", "require('./test/b')");
        // return output[0].replace('@', './');
        return output[0];
    };
    Compiler.prototype.reportError = function (diagnosticText) {
        console.log(diagnosticText);
    };
    Compiler.prototype.formatDiagnostics = function (diagnostics) {
        var root = this.root;
        var diagnosticHost = {
            // @ts-ignore
            getNewLine: function () { return typescript_1["default"].sys.newLine; },
            // @ts-ignore
            getCurrentDirectory: function () { return root; },
            getCanonicalFileName: typescript_1["default"].sys.useCaseSensitiveFileNames
                ? (function (x) { return x; })
                : (function (x) { return x.toLowerCase(); })
        };
        var oldFormatDiagnostics = process.stdout.isTTY
            ? (typescript_1["default"].formatDiagnosticsWithColorAndContext || typescript_1["default"].formatDiagnostics)
            : typescript_1["default"].formatDiagnostics;
        var diagnosticText = oldFormatDiagnostics(diagnostics, diagnosticHost);
        return diagnosticText;
    };
    return Compiler;
}());
exports["default"] = Compiler;
