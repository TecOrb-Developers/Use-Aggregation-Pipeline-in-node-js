"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _index=_interopRequireDefault(require("./index.js"));var _areaGenerator=_interopRequireDefault(require("../shape-generators/area-generator.js"));var _lineGenerator=_interopRequireDefault(require("../shape-generators/line-generator.js"));var timesFour=function timesFour(a){return a*4},isGTFour=function isGTFour(a){return a>4},quarter=function quarter(a){return a/4},ltGtFour=function ltGtFour(a){return isGTFour(a)?"gt4":"lt4"},dummyChunks={a:{},b:{}},pathLength=function pathLength(pathStr){if(pathStr===void 0){pathStr=""}if(pathStr==null||!pathStr.length)return 0;return pathStr.split(/(?=[MmLlhhVvCcSsQqTtAa])/).length};describe("Chunker",(function(){it("should create a Chunker for Areas by default",(function(){var chunker=new _index.default;expect(chunker.generator instanceof _areaGenerator.default).toBeTruthy()}));describe("for both Areas and Lines",(function(){it("should have working getters and setters",(function(){var chunkers=[new _index.default(_areaGenerator.default),new _index.default(_lineGenerator.default)];chunkers.forEach((function(chunker){expect(chunker.setXAccessor(timesFour).getXAccessor()(2)).toBe(8);expect(chunker.setYAccessor(timesFour).getYAccessor()(2)).toBe(8);expect(chunker.setYBaseAccessor(timesFour).getYBaseAccessor()(2)).toBe(8);expect(chunker.setYTopAccessor(timesFour).getYTopAccessor()(2)).toBe(8);expect(chunker.setDefined(isGTFour).getDefined()(2)).toBeFalsy();expect(chunker.setChunkDecider(ltGtFour).getChunkDecider()(2)).toBe("lt4");expect(chunker.setChunks(dummyChunks).getChunks()).not.toBe(dummyChunks);expect(chunker.setChunks({a:{},b:{}}).getChunks()).toEqual(dummyChunks);expect(chunker.setChunks({a:{},b:{}}).chunks).toEqual({a:{},b:{},undef:{},def:{}});expect(chunker.setCurve(quarter).getCurve()(4)).toBe(1);expect(chunker.setConnectUndefineds(true).getConnectUndefineds()).toBeTruthy()}))}));describe("should be able to create Y line chunkers",(function(){var chunkers=[new _index.default(_areaGenerator.default),new _index.default(_lineGenerator.default)].map((function(chunker){return chunker.setChunkDecider(ltGtFour).setChunks(dummyChunks).setConnectUndefineds(true).setCurve(quarter).setDefined(isGTFour)}));it("which can generate lines",(function(){var lineYChunkers=chunkers.flatMap((function(chunker){return[chunker.getLineChunkerYBase(),chunker.getLineChunkerYTop()]}));lineYChunkers.forEach((function(lineYChunkers){expect(lineYChunkers.generator instanceof _lineGenerator.default).toBeTruthy()}))}));it("with the same properties as the original chunker",(function(){chunkers.map((function(chunker){return[[chunker.getLineChunkerYBase(),chunker.getLineChunkerYTop()],chunker]})).forEach((function(_ref){var lineYChunkers=_ref[0],originalChunker=_ref[1];lineYChunkers.forEach((function(lineYChunker){expect(lineYChunker.getChunkDecider()).toBe(originalChunker.getChunkDecider());expect(lineYChunker.getChunks()).toEqual(originalChunker.getChunks());expect(lineYChunker.getConnectUndefineds()).toBe(originalChunker.getConnectUndefineds());expect(lineYChunker.getCurve()).toBe(originalChunker.getCurve());expect(lineYChunker.getDefined()).toBe(originalChunker.getDefined())}))}))}))}));it("should generate correct chunks for empty data",(function(){var chunkers=[new _index.default(_areaGenerator.default),new _index.default(_lineGenerator.default)];chunkers.forEach((function(chunker){var chunk=chunker.generate([]);expect(chunk.def).toBeDefined();expect(typeof chunk.def.path).toBe("string");expect(pathLength(chunk.def.path)).toBe(0);expect(chunk.def.clipRects instanceof Array).toBe(true);expect(chunk.def.clipRects.length).toBe(0);expect(chunk.undef).toBeDefined();expect(typeof chunk.undef.path).toBe("string");expect(pathLength(chunk.undef.path)).toBe(0);expect(chunk.undef.clipRects instanceof Array).toBe(true);expect(chunk.undef.clipRects.length).toBe(0)}))}));it("should generate correct chunks for data with one data point",(function(){var data=[[0,1]],chunks=[new _index.default(_areaGenerator.default).generate(data),new _index.default(_lineGenerator.default).generate(data)];chunks.forEach((function(chunk){expect(chunk.def).toBeDefined();expect(typeof chunk.def.path).toBe("string");expect(chunk.def.clipRects instanceof Array).toBe(true);expect(chunk.def.clipRects.length).toBe(0);expect(chunk.undef).toBeDefined();expect(typeof chunk.undef.path).toBe("string");expect(pathLength(chunk.undef.path)).toBe(0);expect(chunk.undef.clipRects instanceof Array).toBe(true);expect(chunk.undef.clipRects.length).toBe(0)}))}))}));it("should generate correct chunks for data with one only a single undefined data point",(function(){var chunkerArea=new _index.default(_areaGenerator.default),chunkArea=chunkerArea.setDefined((function(d){return d[1]!=null})).generate([[1,null]]),chunkerLine=new _index.default(_lineGenerator.default),chunkLine=chunkerLine.setDefined((function(d){return d[1]!=null})).generate([[1,null]]),chunks=[chunkArea,chunkLine];chunks.forEach((function(chunk){expect(chunk.def).toBeDefined();expect(typeof chunk.def.path).toBe("string");expect(pathLength(chunkLine.def.path)).toBe(0);expect(chunk.def.clipRects instanceof Array).toBe(true);expect(chunk.def.clipRects.length).toBe(0);expect(chunk.undef).toBeDefined();expect(typeof chunk.undef.path).toBe("string");expect(pathLength(chunk.undef.path)).toBe(0);expect(chunk.undef.clipRects instanceof Array).toBe(true);expect(chunk.undef.clipRects.length).toBe(0)}))}));describe("for Areas",(function(){it("should be able to generate areas",(function(){var chunker=new _index.default(_areaGenerator.default);expect(chunker.generator instanceof _areaGenerator.default).toBeTruthy()}));describe("should be able to create Y line chunkers",(function(){it("with correct X and Y accessors",(function(){var chunker=new _index.default(_areaGenerator.default).setYTopAccessor(timesFour).setYBaseAccessor(quarter),chunkerLineYTop=chunker.getLineChunkerYTop(),chunkerLineYBase=chunker.getLineChunkerYBase();expect(chunkerLineYTop.getXAccessor()).toBe(chunker.getXAccessor());expect(chunkerLineYTop.getYAccessor()).toBe(chunker.getYTopAccessor());expect(chunkerLineYBase.getXAccessor()).toBe(chunker.getXAccessor());expect(chunkerLineYBase.getYAccessor()).toBe(chunker.getYBaseAccessor())}))}));it("should be able to generate correct defined path for a single data point",(function(){var chunker=new _index.default(_areaGenerator.default).generate([[0,1]]);expect(pathLength(chunker.def.path)).toBe(2);expect(chunker.def.path).toBe("M0,1L0,0Z")}));describe("should generate correct defined and undefined chunks",(function(){it("for data with several defined data points",(function(){var data=[[0,1],[1,2],[2,1]],lineChunks=new _index.default(_areaGenerator.default).generate(data);expect(pathLength(lineChunks.def.path)).toBe(6);expect(lineChunks.def.path).toBe("M0,1L1,2L2,1L2,0L1,0L0,0Z");expect(lineChunks.def.clipRects.length).toBe(1);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:0,width:2,height:2});expect(pathLength(lineChunks.undef.path)).toBe(0);expect(lineChunks.undef.path).toBe("");expect(lineChunks.undef.clipRects.length).toBe(0)}));it("for data with a mix of defined and undefined data points",(function(){var data=[[0,1],[1,2],[2,null],[3,null],[4,1],[5,null],[6,2],[7,3]],lineChunks=new _index.default(_areaGenerator.default).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true).generate(data);expect(pathLength(lineChunks.def.path)).toBe(10);expect(lineChunks.def.path).toBe("M0,1L1,2L4,1L6,2L7,3L7,0L6,0L4,0L1,0L0,0Z");expect(lineChunks.def.clipRects.length).toBe(2);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:0,width:1,height:2});expect(lineChunks.def.clipRects[1]).toEqual({x:6,y:0,width:1,height:3});expect(pathLength(lineChunks.undef.path)).toBe(10);expect(lineChunks.undef.path).toBe("M0,1L1,2L4,1L6,2L7,3L7,0L6,0L4,0L1,0L0,0Z");expect(lineChunks.undef.clipRects.length).toBe(2);expect(lineChunks.undef.clipRects[0]).toEqual({x:1,y:0,width:3,height:2});expect(lineChunks.undef.clipRects[1]).toEqual({x:4,y:0,width:2,height:3})}))}));it("should be able to adjust the generated clip rects based on a chunk's clipAdjustment",(function(){var data=[[0,1],[1,2],[2,null],[3,null],[4,1],[5,null],[6,2],[7,3]],lineChunks=new _index.default(_areaGenerator.default).setChunks({def:{clipAdjustment:20},undef:{clipAdjustment:10}}).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true).generate(data);expect(pathLength(lineChunks.def.path)).toBe(10);expect(lineChunks.def.path).toBe("M0,1L1,2L4,1L6,2L7,3L7,0L6,0L4,0L1,0L0,0Z");expect(lineChunks.def.clipRects.length).toBe(2);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:-20,width:1,height:42});expect(lineChunks.def.clipRects[1]).toEqual({x:6,y:-20,width:1,height:43});expect(pathLength(lineChunks.undef.path)).toBe(10);expect(lineChunks.undef.path).toBe("M0,1L1,2L4,1L6,2L7,3L7,0L6,0L4,0L1,0L0,0Z");expect(lineChunks.undef.clipRects.length).toBe(2);expect(lineChunks.undef.clipRects[0]).toEqual({x:1,y:-20,width:3,height:42});expect(lineChunks.undef.clipRects[1]).toEqual({x:4,y:-20,width:2,height:43})}));it("should be able to create custom chunks based on the chunk definitions and the chunk decider",(function(){var data=[[0,1],[1,2],[2,3],[3,null],[4,null],[5,2],[6,7],[7,1],[8,2],[9,1],[10,null]],chunker=new _index.default(_areaGenerator.default).setChunks({custom:{}}).setChunkDecider((function(d){return d[1]>1?"custom":"def"})).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true),chunks=chunker.generate(data);expect(chunker.getChunks()).toEqual({custom:{}});expect(pathLength(chunks.def.path)).toBe(16);expect(chunks.def.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1L9,0L8,0L7,0L6,0L5,0L2,0L1,0L0,0Z");expect(chunks.def.clipRects.length).toBe(2);expect(chunks.def.clipRects[0]).toEqual({x:0,y:0,width:1,height:2});expect(chunks.def.clipRects[1]).toEqual({x:6,y:0,width:3,height:7});expect(pathLength(chunks.undef.path)).toBe(16);expect(chunks.undef.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1L9,0L8,0L7,0L6,0L5,0L2,0L1,0L0,0Z");expect(chunks.undef.clipRects.length).toBe(1);expect(chunks.undef.clipRects[0]).toEqual({x:2,y:0,width:3,height:7});expect(pathLength(chunks.custom.path)).toBe(16);expect(chunks.custom.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1L9,0L8,0L7,0L6,0L5,0L2,0L1,0L0,0Z");expect(chunks.custom.clipRects.length).toBe(2);expect(chunks.custom.clipRects[0]).toEqual({x:1,y:0,width:1,height:3});expect(chunks.custom.clipRects[1]).toEqual({x:5,y:0,width:1,height:7})}))}));describe("for Lines",(function(){it("should be able to generate areas",(function(){var chunker=new _index.default(_lineGenerator.default);expect(chunker.generator instanceof _lineGenerator.default).toBeTruthy()}));describe("should be able to create Y line chunkers",(function(){it("with correct X and Y accessors",(function(){var chunker=new _index.default(_lineGenerator.default).setYTopAccessor(timesFour).setYBaseAccessor(quarter),chunkerLineYTop=chunker.getLineChunkerYTop(),chunkerLineYBase=chunker.getLineChunkerYBase();expect(chunkerLineYTop.getXAccessor()).toBe(chunker.getXAccessor());expect(chunkerLineYTop.getYAccessor()).toBe(chunker.getYAccessor());expect(chunkerLineYBase.getXAccessor()).toBe(chunker.getXAccessor());expect(chunkerLineYBase.getYAccessor()).toBe(chunker.getYAccessor())}))}));it("should be able to generate correct defined path for a single data point",(function(){var chunker=new _index.default(_lineGenerator.default).generate([[0,1]]);expect(pathLength(chunker.def.path)).toBe(1);expect(chunker.def.path).toBe("M0,1Z")}));describe("should generate correct defined and undefined chunks",(function(){it("for data with several defined data points",(function(){var data=[[0,1],[1,2],[2,1]],lineChunks=new _index.default(_lineGenerator.default).generate(data);expect(pathLength(lineChunks.def.path)).toBe(3);expect(lineChunks.def.path).toBe("M0,1L1,2L2,1");expect(lineChunks.def.clipRects.length).toBe(1);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:1,width:2,height:1});expect(pathLength(lineChunks.undef.path)).toBe(0);expect(lineChunks.undef.path).toBe("");expect(lineChunks.undef.clipRects.length).toBe(0)}));it("for data with a mix of defined and undefined data points",(function(){var data=[[0,1],[1,2],[2,null],[3,null],[4,1],[5,null],[6,2],[7,3]],lineChunks=new _index.default(_lineGenerator.default).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true).generate(data);expect(pathLength(lineChunks.def.path)).toBe(5);expect(lineChunks.def.path).toBe("M0,1L1,2L4,1L6,2L7,3");expect(lineChunks.def.clipRects.length).toBe(2);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:1,width:1,height:1});expect(lineChunks.def.clipRects[1]).toEqual({x:6,y:2,width:1,height:1});expect(pathLength(lineChunks.undef.path)).toBe(5);expect(lineChunks.undef.path).toBe("M0,1L1,2L4,1L6,2L7,3");expect(lineChunks.undef.clipRects.length).toBe(2);expect(lineChunks.undef.clipRects[0]).toEqual({x:1,y:1,width:3,height:1});expect(lineChunks.undef.clipRects[1]).toEqual({x:4,y:1,width:2,height:2})}));it("for data with several chunks of undefined points and a single chunk of defined points",(function(){var data=[[0,1],[1,null],[2,null],[3,null],[4,1],[5,2],[6,3]],lineChunks=new _index.default(_lineGenerator.default).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true).generate(data);expect(pathLength(lineChunks.def.path)).toBe(4);expect(lineChunks.def.path).toBe("M0,1L4,1L5,2L6,3");expect(lineChunks.def.clipRects.length).toBe(1);expect(lineChunks.def.clipRects[0]).toEqual({x:4,y:1,width:2,height:2});expect(pathLength(lineChunks.undef.path)).toBe(4);expect(lineChunks.undef.path).toBe("M0,1L4,1L5,2L6,3");expect(lineChunks.undef.clipRects.length).toBe(1);expect(lineChunks.undef.clipRects[0]).toEqual({x:0,y:1,width:4,height:2})}))}));it("should be able to adjust the generated clip rects based on a chunk's clipAdjustment",(function(){var data=[[0,1],[1,2],[2,null],[3,null],[4,1],[5,null],[6,2],[7,3]],lineChunks=new _index.default(_lineGenerator.default).setChunks({def:{clipAdjustment:20},undef:{clipAdjustment:10}}).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true).generate(data);expect(pathLength(lineChunks.def.path)).toBe(5);expect(lineChunks.def.path).toBe("M0,1L1,2L4,1L6,2L7,3");expect(lineChunks.def.clipRects.length).toBe(2);expect(lineChunks.def.clipRects[0]).toEqual({x:0,y:-19,width:1,height:41});expect(lineChunks.def.clipRects[1]).toEqual({x:6,y:-18,width:1,height:41});expect(pathLength(lineChunks.undef.path)).toBe(5);expect(lineChunks.undef.path).toBe("M0,1L1,2L4,1L6,2L7,3");expect(lineChunks.undef.clipRects.length).toBe(2);expect(lineChunks.undef.clipRects[0]).toEqual({x:1,y:-19,width:3,height:41});expect(lineChunks.undef.clipRects[1]).toEqual({x:4,y:-19,width:2,height:42})}));it("should be able to create custom chunks based on the chunk definitions and the chunk decider",(function(){var data=[[0,1],[1,2],[2,3],[3,null],[4,null],[5,2],[6,7],[7,1],[8,2],[9,1],[10,null]],chunker=new _index.default(_lineGenerator.default).setChunks({custom:{}}).setChunkDecider((function(d){return d[1]>1?"custom":"def"})).setDefined((function(d){return d[1]!=null})).setConnectUndefineds(true),chunks=chunker.generate(data);expect(chunker.getChunks()).toEqual({custom:{}});expect(pathLength(chunks.def.path)).toBe(8);expect(chunks.def.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1");expect(chunks.def.clipRects.length).toBe(2);expect(chunks.def.clipRects[0]).toEqual({x:0,y:1,width:1,height:1});expect(chunks.def.clipRects[1]).toEqual({x:6,y:1,width:3,height:6});expect(pathLength(chunks.undef.path)).toBe(8);expect(chunks.undef.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1");expect(chunks.undef.clipRects.length).toBe(1);expect(chunks.undef.clipRects[0]).toEqual({x:2,y:2,width:3,height:5});expect(pathLength(chunks.custom.path)).toBe(8);expect(chunks.custom.path).toBe("M0,1L1,2L2,3L5,2L6,7L7,1L8,2L9,1");expect(chunks.custom.clipRects.length).toBe(2);expect(chunks.custom.clipRects[0]).toEqual({x:1,y:2,width:1,height:1});expect(chunks.custom.clipRects[1]).toEqual({x:5,y:2,width:1,height:5})}))}))}));