"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule=true;exports.radiansInAngle=exports.changeAngleBase=exports.findArc=exports.normaliseAngle=exports.pointOnCircleFromCenter=exports.getCoordinates=exports.getPlotFromPixel=exports.polarToCartesian=exports.cartesianToPolar=exports.rad2Deg=exports.deg2Rad=void 0;var _pluckNumber=_interopRequireDefault(require("../pluck-number"));var NOMRALIZE_CONSTANT=90,deg2Rad=function deg2Rad(theta){return theta*(Math.PI/180)},rad2Deg=function rad2Deg(rad){return rad*(180/Math.PI)},cartesianToPolar=function cartesianToPolar(x,y){var r,theta;r=Math.sqrt(x*x+y*y);theta=rad2Deg(Math.atan(y/x));if(x<0&&y>=0){theta+=180}else if(x<0&&y<0){theta+=180}else if(x>0&&y<0){theta+=360}return{radius:r,theta:deg2Rad(theta)}},polarToCartesian=function polarToCartesian(r,_theta,degreeInRad){if(degreeInRad===void 0){degreeInRad=true}var x,y,theta=_theta;if(!degreeInRad){theta=deg2Rad(theta)}x=r*Math.cos(theta);y=r*Math.sin(theta);return{x:x,y:y}},getCoordinates=function getCoordinates(values,axis){var theta,scaleX=axis.getScale(),radius=values.radius,axisConfig=axis.config,centerX=axisConfig.axisDimention.centerX,centerY=axisConfig.axisDimention.centerY,point;radius=(0,_pluckNumber.default)(radius,axisConfig.radius,0);theta=scaleX.getRangeValue(values.theta);point=polarToCartesian(radius,theta);point.x+=centerX;point.y+=centerY;return point},getPlotFromPixel=function getPlotFromPixel(coordinates,axis){var x=coordinates.x,y=coordinates.y,scaleX=axis.getScale(),theta,plot;plot=cartesianToPolar(x,y);theta=scaleX.getDomainValue(plot.theta);return rad2Deg(theta)},pointOnCircleFromCenter=function pointOnCircleFromCenter(centerX,centerY,radius,angleInDegrees){var angleInRadians=(angleInDegrees-90)*Math.PI/180;return{x:centerX+radius*Math.cos(angleInRadians),y:centerY+radius*Math.sin(angleInRadians)}},normaliseAngle=function normaliseAngle(angle){return angle-NOMRALIZE_CONSTANT},findArc=function findArc(startAngle,endingAngle){var endAngle,arc=0;endAngle=endingAngle>360?endingAngle%360:endingAngle<0?360+endingAngle:endingAngle;if(endAngle>startAngle){arc=endAngle-startAngle}else{arc=360-(startAngle-endAngle)}return arc},changeAngleBase=function changeAngleBase(angle){if(angle>=0&&angle<90){return Math.abs(180-angle)}else if(angle>90&&angle<=180){return Math.abs(angle-180)}else if(angle>180&&angle<270||angle>270&&angle<360){return Math.abs(360-angle+180)}else if(angle===360){return 180}return angle},radiansInAngle=function radiansInAngle(arc,radius){return arc/radius*(180/Math.PI)};exports.radiansInAngle=radiansInAngle;exports.changeAngleBase=changeAngleBase;exports.findArc=findArc;exports.normaliseAngle=normaliseAngle;exports.pointOnCircleFromCenter=pointOnCircleFromCenter;exports.getPlotFromPixel=getPlotFromPixel;exports.getCoordinates=getCoordinates;exports.polarToCartesian=polarToCartesian;exports.cartesianToPolar=cartesianToPolar;exports.rad2Deg=rad2Deg;exports.deg2Rad=deg2Rad;