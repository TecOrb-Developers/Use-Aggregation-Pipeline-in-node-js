"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _range=_interopRequireDefault(require("./range"));describe("range(stop) should",(function(){it("return [0, 1, 2, ..., stop - 1]",(function(){expect((0,_range.default)(5)).toEqual([0,1,2,3,4]);expect((0,_range.default)(2.01)).toEqual([0,1,2]);expect((0,_range.default)(1)).toEqual([0]);expect((0,_range.default)(.5)).toEqual([0])}));it("return an empty array if stop <= 0",(function(){expect((0,_range.default)(0)).toEqual([]);expect((0,_range.default)(-.5)).toEqual([]);expect((0,_range.default)(-1)).toEqual([])}));it("return an empty array if stop is NaN",(function(){expect((0,_range.default)(NaN)).toEqual([]);expect((0,_range.default)()).toEqual([])}))}));describe("range(start, stop) should",(function(){it("return [start, start + 1, ..., stop - 1]",(function(){expect((0,_range.default)(0,5)).toEqual([0,1,2,3,4]);expect((0,_range.default)(2,5)).toEqual([2,3,4]);expect((0,_range.default)(2.5,5)).toEqual([2.5,3.5,4.5]);expect((0,_range.default)(-1,3)).toEqual([-1,0,1,2])}));it("return an empty array if start or stop is NaN",(function(){expect((0,_range.default)(0,NaN)).toEqual([]);expect((0,_range.default)(1,NaN)).toEqual([]);expect((0,_range.default)(-1,NaN)).toEqual([]);expect((0,_range.default)(NaN,0)).toEqual([]);expect((0,_range.default)(NaN,1)).toEqual([]);expect((0,_range.default)(NaN,-1)).toEqual([]);expect((0,_range.default)(NaN,NaN)).toEqual([])}));it("return an empty array if start or stop is undefined",(function(){expect((0,_range.default)(0,undefined)).toEqual([]);expect((0,_range.default)(1,undefined)).toEqual([]);expect((0,_range.default)(-1,undefined)).toEqual([]);expect((0,_range.default)(undefined,0)).toEqual([]);expect((0,_range.default)(undefined,1)).toEqual([]);expect((0,_range.default)(undefined,-1)).toEqual([]);expect((0,_range.default)(undefined,undefined)).toEqual([])}));it("return an empty array if start >= stop",(function(){expect((0,_range.default)(0,0)).toEqual([]);expect((0,_range.default)(5,5)).toEqual([]);expect((0,_range.default)(6,5)).toEqual([]);expect((0,_range.default)(10,10)).toEqual([]);expect((0,_range.default)(20,10)).toEqual([])}))}));describe("range(start, stop, step) should",(function(){it("return [start, start + step, start + (step * 2), ..., stop - step]",(function(){expect((0,_range.default)(0,5,1)).toEqual([0,1,2,3,4]);expect((0,_range.default)(0,5,2)).toEqual([0,2,4]);expect((0,_range.default)(2,5,2)).toEqual([2,4]);expect((0,_range.default)(-1,3,2)).toEqual([-1,1])}));it("allow negative steps",(function(){expect((0,_range.default)(5,0,-1)).toEqual([5,4,3,2,1]);expect((0,_range.default)(5,0,-2)).toEqual([5,3,1]);expect((0,_range.default)(5,2,-2)).toEqual([5,3]);expect((0,_range.default)(3,-1,-2)).toEqual([3,1])}));it("return an empty array if start >= stop and step > 0",(function(){expect((0,_range.default)(5,5,2)).toEqual([]);expect((0,_range.default)(6,5,2)).toEqual([]);expect((0,_range.default)(10,10,1)).toEqual([]);expect((0,_range.default)(10,10,.5)).toEqual([]);expect((0,_range.default)(0,0,1)).toEqual([]);expect((0,_range.default)(0,0,.5)).toEqual([]);expect((0,_range.default)(20,10,2)).toEqual([]);expect((0,_range.default)(20,10,1)).toEqual([]);expect((0,_range.default)(20,10,.5)).toEqual([])}));it("returns an empty array if start, stop or step is NaN",(function(){expect((0,_range.default)(NaN,3,2)).toEqual([]);expect((0,_range.default)(3,NaN,2)).toEqual([]);expect((0,_range.default)(0,5,NaN)).toEqual([]);expect((0,_range.default)(0,10,NaN)).toEqual([]);expect((0,_range.default)(10,0,NaN)).toEqual([]);expect((0,_range.default)(NaN,NaN,NaN)).toEqual([]);expect((0,_range.default)(NaN,NaN,NaN)).toEqual([])}));it("returns an empty array if start, stop or step is undefined",(function(){expect((0,_range.default)(undefined,undefined,undefined)).toEqual([]);expect((0,_range.default)(0,10,undefined)).toEqual([]);expect((0,_range.default)(10,0,undefined)).toEqual([])}));it("returns an empty array if step is 0",(function(){expect((0,_range.default)(0,5,0)).toEqual([])}));it("returns the correct sequence for when step is fractional",(function(){expect((0,_range.default)(.5,0,-.1)).toEqual([.5-.1*0,.5-.1*1,.5-.1*2,.5-.1*3,.5-.1*4]);expect((0,_range.default)(-2,-1.2,.1)).toEqual([-2+.1*0,-2+.1*1,-2+.1*2,-2+.1*3,-2+.1*4,-2+.1*5,-2+.1*6,-2+.1*7]);expect((0,_range.default)(5e-31,21e-32,-11e-32)).toEqual([5e-31-11e-32*0,5e-31-11e-32*1,5e-31-11e-32*2]);expect((0,_range.default)(2e300,1e300,-3e299)).toEqual([2e300-3e299*0,2e300-3e299*1,2e300-3e299*2,2e300-3e299*3])}))}));