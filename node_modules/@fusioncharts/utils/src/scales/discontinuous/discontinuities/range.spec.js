"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _range=_interopRequireDefault(require("./range"));describe("DiscontinuityRange",(function(){describe("#clampUp",(function(){it("should do nothing if no ranges are provided",(function(){expect((new _range.default).clampUp(10)).toBe(10)}));it("should clamp up if the number falls within a discontinuity",(function(){expect(new _range.default([0,10]).clampUp(5)).toBe(10);expect(new _range.default([0,10],[20,30]).clampUp(25)).toBe(30);expect(new _range.default([-10,10],[20,30]).clampUp(0)).toBe(10)}));it("should not clamp up at the boundary of a discontinuity",(function(){expect(new _range.default([0,10]).clampUp(0)).toBe(0)}))}));describe("#clampDown",(function(){it("should do nothing if no ranges are provided",(function(){expect((new _range.default).clampDown(10)).toBe(10)}));it("should clamp down if the number falls within a discontinuity",(function(){expect(new _range.default([0,10]).clampDown(5)).toBe(0);expect(new _range.default([0,10],[20,30]).clampDown(25)).toBe(20);expect(new _range.default([-10,10],[20,30]).clampDown(0)).toBe(-10)}));it("should not clamp down at the boundary of a discontinuity",(function(){expect(new _range.default([0,10]).clampDown(10)).toBe(10)}))}));describe("#distance",(function(){it("should do nothing if no ranges are provided",(function(){expect((new _range.default).distance(10,20)).toBe(10)}));it("should remove discontinuities",(function(){expect(new _range.default([0,10]).distance(0,20)).toBe(10);expect(new _range.default([0,10]).distance(5,20)).toBe(10);expect(new _range.default([0,10],[10,20]).distance(0,30)).toBe(10);expect(new _range.default([0,10],[20,30]).distance(0,30)).toBe(10)}))}));describe("#offset",(function(){it("should simply offset if no ranges are provided",(function(){expect((new _range.default).offset(10,5)).toBe(15);expect((new _range.default).offset(-10,50)).toBe(40);expect((new _range.default).offset(10,-5)).toBe(5)}));it("should offset with discontinuities",(function(){expect(new _range.default([5,10]).offset(4,2)).toBe(11);expect(new _range.default([5,10]).offset(7,2)).toBe(12);expect(new _range.default([5,10]).offset(17,2)).toBe(19);expect(new _range.default([5,10],[20,30]).offset(0,40)).toBe(55)}));it("should allow negative offsets with discontinuities",(function(){expect(new _range.default([5,10]).offset(11,-2)).toBe(4);expect(new _range.default([5,10]).offset(7,-2)).toBe(3);expect(new _range.default([5,10]).offset(2,-2)).toBe(0);expect(new _range.default([5,10],[20,30]).offset(55,-40)).toBe(0)}))}));it("#copy",(function(){var original=new _range.default([5,10],[20,30]);var copy;expect(original.offset(0,40)).toBe(55);copy=original.copy();expect(copy.offset(0,40)).toBe(55)}));it("should support dates",(function(){var start=new Date(2015,0,9),end=new Date(2015,0,10),range=new _range.default([start,end]);expect(range.distance(new Date(2015,0,8),new Date(2015,0,11))).toBe(24*3600*1e3*2);expect(range.offset(new Date(2015,0,8),24*3600*1e3*2)).toEqual(new Date(2015,0,11))}))}));