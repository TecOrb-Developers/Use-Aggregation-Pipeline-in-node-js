"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _linear=_interopRequireDefault(require("../linear"));var _discontinuous=_interopRequireDefault(require("./discontinuous"));var _range=_interopRequireDefault(require("./discontinuities/range"));describe("A discontinuous scale",(function(){it("should default to being an identity scale",(function(){var scale=new _discontinuous.default;expect(scale.getRangeValue(0)).toBe(0);expect(scale.getRangeValue(10)).toBe(10);expect(scale.getDomainValue(0)).toBe(0);expect(scale.getDomainValue(10)).toBe(10)}));it("should support copy",(function(){var start=new Date(2015,0,8),end=new Date(2015,0,15),scale=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default).setRange([0,100]).setDomain([start,end]),clone=scale.copy();expect(clone.getDiscontinuity()).toEqual(scale.getDiscontinuity());expect(clone.getRange()[0]).toBe(0);expect(clone.getRange()[1]).toBe(100);expect(clone.getDomain()[0]).toEqual(+start);expect(clone.getDomain()[1]).toEqual(+end)}));describe("ticks",(function(){it("should ensure that they are not within discontinuities",(function(){var scale=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default([5,20])).setDomain([0,25]),ticksInDiscontinuityRange=scale.ticks().filter((function(tick){return tick>5&&tick<20}));expect(ticksInDiscontinuityRange).toEqual([])}));it("should support arguments being passed to it",(function(){var start=new Date(2015,0,9),end=new Date(2015,0,12),scale=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default([5,20])).setDomain([start,end]);expect(scale.ticks(100).length).toEqual(130)}))}));describe("without discontinuities",(function(){var range=[0,100],start=10,end=60,referenceScale=(new _linear.default).setDomain([start,end]).setRange(range),scale=new _discontinuous.default(new _linear.default).setDomain([start,end]).setRange(range);it("should match the scaling of a regular linear scale",(function(){expect(scale.getRangeValue(20)).toEqual(referenceScale.getRangeValue(20));expect(scale.getRangeValue(50)).toEqual(referenceScale.getRangeValue(50));expect(scale.getRangeValue(start)).toEqual(referenceScale.getRangeValue(start));expect(scale.getRangeValue(end)).toEqual(referenceScale.getRangeValue(end))}));it("should match the inverse scaling of a regular linear scale",(function(){expect(scale.getDomainValue(0)).toEqual(referenceScale.getDomainValue(0));expect(scale.getDomainValue(50)).toEqual(referenceScale.getDomainValue(50));expect(scale.getDomainValue(100)).toEqual(referenceScale.getDomainValue(100))}))}));describe("with discontinuities",(function(){it("should scale correctly",(function(){var scale=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default([40,90])).setDomain([0,100]).setRange([0,100]);expect(scale.getRangeValue(10)).toEqual(20)}))}));describe("domain",(function(){var endOfWeek=new Date(2015,0,25,12),end=new Date(2015,0,25,12),startOfWeek=new Date(2015,0,18,12),start=new Date(2015,0,18,12);it("should clamp the supplied values",(function(){var dateTime=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default).setDomain([start,end]);expect(dateTime.getDomain()[0]).toEqual(+startOfWeek);expect(dateTime.getDomain()[1]).toEqual(+endOfWeek)}))}));describe("nice",(function(){it("should clamp the resulting domain",(function(){var scale=new _discontinuous.default(new _linear.default).setDiscontinuity(new _range.default([-.1,.1],[9.9,10.1])).setDomain([.2,9.8]);scale.nice();expect(scale.getDomain()[0]).toBe(.1);expect(scale.getDomain()[1]).toBe(9.9)}))}))}));