"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule=true;exports.default=void 0;var _inheritsLoose2=_interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));var _log=_interopRequireDefault(require("./log"));var _ticks=_interopRequireDefault(require("../scale-utils/array/ticks"));var UNDEF;var Log=function(_FcLog){(0,_inheritsLoose2.default)(Log,_FcLog);function Log(){return _FcLog.apply(this,arguments)||this}var _proto=Log.prototype;_proto.ticks=function ticks(noOfTicks){var _this$getDomain=this.getDomain(),min=_this$getDomain[0],max=_this$getDomain[1],maxLogY,isReverse=0,minLogY,iniValue,checkValue,divLines=[],_tickType=[],divLineValue,r,i,j,count=0,slabInterval,subInterval,interimDivLineValue,lastDivLine,base=this.base,baseWithRespectTo10=Math.log(base)/Math.log(10),d=base>1?-1:1,numMinorTicks=baseWithRespectTo10%1?4:8;if(min<=0||max<=0){return divLines}if(min>max){var _this$getDomain2=this.getDomain();max=_this$getDomain2[0];min=_this$getDomain2[1];isReverse=1}if(base>1){maxLogY=Math.ceil(Math.log(max)/Math.log(base));minLogY=Math.floor(Math.log(min)/Math.log(base));checkValue=maxLogY;iniValue=minLogY}else if(base>0&&base<1){maxLogY=Math.floor(Math.log(max)/Math.log(base));minLogY=Math.ceil(Math.log(min)/Math.log(base));checkValue=minLogY;iniValue=maxLogY}r=minLogY;for(i=iniValue;i<=checkValue;++i){divLineValue=this.pows(r);if(typeof lastDivLine!=="undefined"){if(base>1){maxLogY=Math.ceil(Math.log(divLineValue)/Math.log(base))}else if(base>0&&base<1){maxLogY=Math.floor(Math.log(divLineValue)/Math.log(base))}slabInterval=Math.pow(base,maxLogY)-Math.pow(base,maxLogY+d);subInterval=slabInterval/(numMinorTicks+1);for(j=1;j<=numMinorTicks;++j){interimDivLineValue=Math.pow(base,maxLogY+d)+subInterval*j;divLines.push(interimDivLineValue);_tickType.push("minor");if(min>interimDivLineValue||max<interimDivLineValue){++count}}}divLines.push(divLineValue);_tickType.push("major");if(min>divLineValue||max<divLineValue){++count}lastDivLine=divLineValue;if(base>1){r++}else{r--}}this._tickType=_tickType;if(divLines.length-count<=2){divLines=(0,_ticks.default)(min,max,noOfTicks);this._tickType=UNDEF}return this.majorTicks=isReverse?divLines.reverse():divLines};return Log}(_log.default);var _default=Log;exports.default=_default;