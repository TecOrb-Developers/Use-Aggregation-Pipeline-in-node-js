"use strict";var _ticks=_interopRequireWildcard(require("./ticks"));function _getRequireWildcardCache(nodeInterop){if(typeof WeakMap!=="function")return null;var cacheBabelInterop=new WeakMap;var cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function _getRequireWildcardCache(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(key!=="default"&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}describe("ticks(start, stop, count) should return",(function(){it("an empty array if any argument is NaN",(function(){expect((0,_ticks.default)(NaN,1,1)).toEqual([]);expect((0,_ticks.default)(0,NaN,1)).toEqual([]);expect((0,_ticks.default)(0,1,NaN)).toEqual([]);expect((0,_ticks.default)(NaN,NaN,1)).toEqual([]);expect((0,_ticks.default)(0,NaN,NaN)).toEqual([]);expect((0,_ticks.default)(NaN,1,NaN)).toEqual([]);expect((0,_ticks.default)(NaN,NaN,NaN)).toEqual([])}));it("an empty array if start and stop are equal and count is not positive",(function(){expect((0,_ticks.default)(1,1,-1)).toEqual([]);expect((0,_ticks.default)(1,1,0)).toEqual([]);expect((0,_ticks.default)(1,1,NaN)).toEqual([])}));it("an array of one element if start and stop are equal and count is positive",(function(){expect((0,_ticks.default)(1,1,1)).toEqual([1]);expect((0,_ticks.default)(1,1,10)).toEqual([1])}));it("an empty array if count is not positive",(function(){expect((0,_ticks.default)(0,1,0)).toEqual([]);expect((0,_ticks.default)(0,1,-1)).toEqual([]);expect((0,_ticks.default)(1,1,NaN)).toEqual([])}));it("an empty array if count is Infinity",(function(){expect((0,_ticks.default)(0,1,Infinity)).toEqual([])}));it("approximately count + 1 ticks when start < stop",(function(){expect((0,_ticks.default)(0,1,10)).toEqual([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]);expect((0,_ticks.default)(0,1,9)).toEqual([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]);expect((0,_ticks.default)(0,1,8)).toEqual([0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1]);expect((0,_ticks.default)(0,1,7)).toEqual([0,.2,.4,.6,.8,1]);expect((0,_ticks.default)(0,1,6)).toEqual([0,.2,.4,.6,.8,1]);expect((0,_ticks.default)(0,1,5)).toEqual([0,.2,.4,.6,.8,1]);expect((0,_ticks.default)(0,1,4)).toEqual([0,.2,.4,.6,.8,1]);expect((0,_ticks.default)(0,1,3)).toEqual([0,.5,1]);expect((0,_ticks.default)(0,1,2)).toEqual([0,.5,1]);expect((0,_ticks.default)(0,1,1)).toEqual([0,1]);expect((0,_ticks.default)(0,10,10)).toEqual([0,1,2,3,4,5,6,7,8,9,10]);expect((0,_ticks.default)(0,10,9)).toEqual([0,1,2,3,4,5,6,7,8,9,10]);expect((0,_ticks.default)(0,10,8)).toEqual([0,1,2,3,4,5,6,7,8,9,10]);expect((0,_ticks.default)(0,10,7)).toEqual([0,2,4,6,8,10]);expect((0,_ticks.default)(0,10,6)).toEqual([0,2,4,6,8,10]);expect((0,_ticks.default)(0,10,5)).toEqual([0,2,4,6,8,10]);expect((0,_ticks.default)(0,10,4)).toEqual([0,2,4,6,8,10]);expect((0,_ticks.default)(0,10,3)).toEqual([0,5,10]);expect((0,_ticks.default)(0,10,2)).toEqual([0,5,10]);expect((0,_ticks.default)(0,10,1)).toEqual([0,10]);expect((0,_ticks.default)(-10,10,10)).toEqual([-10,-8,-6,-4,-2,0,2,4,6,8,10]);expect((0,_ticks.default)(-10,10,9)).toEqual([-10,-8,-6,-4,-2,0,2,4,6,8,10]);expect((0,_ticks.default)(-10,10,8)).toEqual([-10,-8,-6,-4,-2,0,2,4,6,8,10]);expect((0,_ticks.default)(-10,10,7)).toEqual([-10,-8,-6,-4,-2,0,2,4,6,8,10]);expect((0,_ticks.default)(-10,10,6)).toEqual([-10,-5,0,5,10]);expect((0,_ticks.default)(-10,10,5)).toEqual([-10,-5,0,5,10]);expect((0,_ticks.default)(-10,10,4)).toEqual([-10,-5,0,5,10]);expect((0,_ticks.default)(-10,10,3)).toEqual([-10,-5,0,5,10]);expect((0,_ticks.default)(-10,10,2)).toEqual([-10,0,10]);expect((0,_ticks.default)(-10,10,1)).toEqual([0])}));it("the reverse of ticks(stop, start, count)",(function(){expect((0,_ticks.default)(1,0,10)).toEqual((0,_ticks.default)(0,1,10).reverse());expect((0,_ticks.default)(1,0,9)).toEqual((0,_ticks.default)(0,1,9).reverse());expect((0,_ticks.default)(1,0,8)).toEqual((0,_ticks.default)(0,1,8).reverse());expect((0,_ticks.default)(1,0,7)).toEqual((0,_ticks.default)(0,1,7).reverse());expect((0,_ticks.default)(1,0,6)).toEqual((0,_ticks.default)(0,1,6).reverse());expect((0,_ticks.default)(1,0,5)).toEqual((0,_ticks.default)(0,1,5).reverse());expect((0,_ticks.default)(1,0,4)).toEqual((0,_ticks.default)(0,1,4).reverse());expect((0,_ticks.default)(1,0,3)).toEqual((0,_ticks.default)(0,1,3).reverse());expect((0,_ticks.default)(1,0,2)).toEqual((0,_ticks.default)(0,1,2).reverse());expect((0,_ticks.default)(1,0,1)).toEqual((0,_ticks.default)(0,1,1).reverse());expect((0,_ticks.default)(10,0,10)).toEqual((0,_ticks.default)(0,10,10).reverse());expect((0,_ticks.default)(10,0,9)).toEqual((0,_ticks.default)(0,10,9).reverse());expect((0,_ticks.default)(10,0,8)).toEqual((0,_ticks.default)(0,10,8).reverse());expect((0,_ticks.default)(10,0,7)).toEqual((0,_ticks.default)(0,10,7).reverse());expect((0,_ticks.default)(10,0,6)).toEqual((0,_ticks.default)(0,10,6).reverse());expect((0,_ticks.default)(10,0,5)).toEqual((0,_ticks.default)(0,10,5).reverse());expect((0,_ticks.default)(10,0,4)).toEqual((0,_ticks.default)(0,10,4).reverse());expect((0,_ticks.default)(10,0,3)).toEqual((0,_ticks.default)(0,10,3).reverse());expect((0,_ticks.default)(10,0,2)).toEqual((0,_ticks.default)(0,10,2).reverse());expect((0,_ticks.default)(10,0,1)).toEqual((0,_ticks.default)(0,10,1).reverse());expect((0,_ticks.default)(10,-10,10)).toEqual((0,_ticks.default)(-10,10,10).reverse());expect((0,_ticks.default)(10,-10,9)).toEqual((0,_ticks.default)(-10,10,9).reverse());expect((0,_ticks.default)(10,-10,8)).toEqual((0,_ticks.default)(-10,10,8).reverse());expect((0,_ticks.default)(10,-10,7)).toEqual((0,_ticks.default)(-10,10,7).reverse());expect((0,_ticks.default)(10,-10,6)).toEqual((0,_ticks.default)(-10,10,6).reverse());expect((0,_ticks.default)(10,-10,5)).toEqual((0,_ticks.default)(-10,10,5).reverse());expect((0,_ticks.default)(10,-10,4)).toEqual((0,_ticks.default)(-10,10,4).reverse());expect((0,_ticks.default)(10,-10,3)).toEqual((0,_ticks.default)(-10,10,3).reverse());expect((0,_ticks.default)(10,-10,2)).toEqual((0,_ticks.default)(-10,10,2).reverse());expect((0,_ticks.default)(10,-10,1)).toEqual((0,_ticks.default)(-10,10,1).reverse())}))}));describe("tickStep(start, stop, count) should return",(function(){it("NaN if any argument is NaN",(function(){expect((0,_ticks.tickStep)(NaN,1,1)).toBeNaN();expect((0,_ticks.tickStep)(0,NaN,1)).toBeNaN();expect((0,_ticks.tickStep)(0,1,NaN)).toBeNaN();expect((0,_ticks.tickStep)(NaN,NaN,1)).toBeNaN();expect((0,_ticks.tickStep)(0,NaN,NaN)).toBeNaN();expect((0,_ticks.tickStep)(NaN,1,NaN)).toBeNaN();expect((0,_ticks.tickStep)(NaN,NaN,NaN)).toBeNaN()}));it("NaN or 0 if start is equal to stop",(function(){expect((0,_ticks.tickStep)(1,1,-1)).toBeNaN();expect((0,_ticks.tickStep)(1,1,0)).toBeNaN();expect((0,_ticks.tickStep)(1,1,NaN)).toBeNaN();expect((0,_ticks.tickStep)(1,1,1)).toBe(0);expect((0,_ticks.tickStep)(1,1,10)).toBe(0)}));it("0 or Infinity if count is not positive",(function(){expect((0,_ticks.tickStep)(0,1,-1)).toBe(Infinity);expect((0,_ticks.tickStep)(0,1,0)).toBe(Infinity)}));it("0 if count is Infinity",(function(){expect((0,_ticks.tickStep)(0,1,Infinity)).toBe(0)}));it("approximately count + 1 tick steps when start < stop",(function(){expect((0,_ticks.tickStep)(0,1,10)).toBe(.1);expect((0,_ticks.tickStep)(0,1,9)).toBe(.1);expect((0,_ticks.tickStep)(0,1,8)).toBe(.1);expect((0,_ticks.tickStep)(0,1,7)).toBe(.2);expect((0,_ticks.tickStep)(0,1,6)).toBe(.2);expect((0,_ticks.tickStep)(0,1,5)).toBe(.2);expect((0,_ticks.tickStep)(0,1,4)).toBe(.2);expect((0,_ticks.tickStep)(0,1,3)).toBe(.5);expect((0,_ticks.tickStep)(0,1,2)).toBe(.5);expect((0,_ticks.tickStep)(0,1,1)).toBe(1);expect((0,_ticks.tickStep)(0,10,10)).toBe(1);expect((0,_ticks.tickStep)(0,10,9)).toBe(1);expect((0,_ticks.tickStep)(0,10,8)).toBe(1);expect((0,_ticks.tickStep)(0,10,7)).toBe(2);expect((0,_ticks.tickStep)(0,10,6)).toBe(2);expect((0,_ticks.tickStep)(0,10,5)).toBe(2);expect((0,_ticks.tickStep)(0,10,4)).toBe(2);expect((0,_ticks.tickStep)(0,10,3)).toBe(5);expect((0,_ticks.tickStep)(0,10,2)).toBe(5);expect((0,_ticks.tickStep)(0,10,1)).toBe(10);expect((0,_ticks.tickStep)(-10,10,10)).toBe(2);expect((0,_ticks.tickStep)(-10,10,9)).toBe(2);expect((0,_ticks.tickStep)(-10,10,8)).toBe(2);expect((0,_ticks.tickStep)(-10,10,7)).toBe(2);expect((0,_ticks.tickStep)(-10,10,6)).toBe(5);expect((0,_ticks.tickStep)(-10,10,5)).toBe(5);expect((0,_ticks.tickStep)(-10,10,4)).toBe(5);expect((0,_ticks.tickStep)(-10,10,3)).toBe(5);expect((0,_ticks.tickStep)(-10,10,2)).toBe(10)}));it("-tickStep(stop, start, count)",(function(){expect((0,_ticks.tickStep)(0,1,10)).toBe(-(0,_ticks.tickStep)(1,0,10));expect((0,_ticks.tickStep)(0,1,9)).toBe(-(0,_ticks.tickStep)(1,0,9));expect((0,_ticks.tickStep)(0,1,8)).toBe(-(0,_ticks.tickStep)(1,0,8));expect((0,_ticks.tickStep)(0,1,7)).toBe(-(0,_ticks.tickStep)(1,0,7));expect((0,_ticks.tickStep)(0,1,6)).toBe(-(0,_ticks.tickStep)(1,0,6));expect((0,_ticks.tickStep)(0,1,5)).toBe(-(0,_ticks.tickStep)(1,0,5));expect((0,_ticks.tickStep)(0,1,4)).toBe(-(0,_ticks.tickStep)(1,0,4));expect((0,_ticks.tickStep)(0,1,3)).toBe(-(0,_ticks.tickStep)(1,0,3));expect((0,_ticks.tickStep)(0,1,2)).toBe(-(0,_ticks.tickStep)(1,0,2));expect((0,_ticks.tickStep)(0,1,1)).toBe(-(0,_ticks.tickStep)(1,0,1));expect((0,_ticks.tickStep)(0,10,10)).toBe(-(0,_ticks.tickStep)(10,0,10));expect((0,_ticks.tickStep)(0,10,9)).toBe(-(0,_ticks.tickStep)(10,0,9));expect((0,_ticks.tickStep)(0,10,8)).toBe(-(0,_ticks.tickStep)(10,0,8));expect((0,_ticks.tickStep)(0,10,7)).toBe(-(0,_ticks.tickStep)(10,0,7));expect((0,_ticks.tickStep)(0,10,6)).toBe(-(0,_ticks.tickStep)(10,0,6));expect((0,_ticks.tickStep)(0,10,5)).toBe(-(0,_ticks.tickStep)(10,0,5));expect((0,_ticks.tickStep)(0,10,4)).toBe(-(0,_ticks.tickStep)(10,0,4));expect((0,_ticks.tickStep)(0,10,3)).toBe(-(0,_ticks.tickStep)(10,0,3));expect((0,_ticks.tickStep)(0,10,2)).toBe(-(0,_ticks.tickStep)(10,0,2));expect((0,_ticks.tickStep)(0,10,1)).toBe(-(0,_ticks.tickStep)(10,0,1));expect((0,_ticks.tickStep)(-10,10,10)).toBe(-(0,_ticks.tickStep)(10,-10,10));expect((0,_ticks.tickStep)(-10,10,9)).toBe(-(0,_ticks.tickStep)(10,-10,9));expect((0,_ticks.tickStep)(-10,10,8)).toBe(-(0,_ticks.tickStep)(10,-10,8));expect((0,_ticks.tickStep)(-10,10,7)).toBe(-(0,_ticks.tickStep)(10,-10,7));expect((0,_ticks.tickStep)(-10,10,6)).toBe(-(0,_ticks.tickStep)(10,-10,6));expect((0,_ticks.tickStep)(-10,10,5)).toBe(-(0,_ticks.tickStep)(10,-10,5));expect((0,_ticks.tickStep)(-10,10,4)).toBe(-(0,_ticks.tickStep)(10,-10,4));expect((0,_ticks.tickStep)(-10,10,3)).toBe(-(0,_ticks.tickStep)(10,-10,3));expect((0,_ticks.tickStep)(-10,10,2)).toBe(-(0,_ticks.tickStep)(10,-10,2));expect((0,_ticks.tickStep)(-10,10,1)).toBe(-(0,_ticks.tickStep)(10,-10,1))}))}));