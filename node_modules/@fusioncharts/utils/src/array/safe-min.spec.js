"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _safeMin=_interopRequireDefault(require("./safe-min"));var pack=function pack(value){return{value:value}},unpack=function unpack(pkg){return pkg.value},array=["a","b","c"];var results,o={valueOf:function valueOf(){return NaN}};describe("testing min values",(function(){it("of numbers",(function(){expect((0,_safeMin.default)([1])).toBe(1)}));it("of numbers",(function(){expect((0,_safeMin.default)([5,1,2,3,4])).toBe(1)}));it("of numbers",(function(){expect((0,_safeMin.default)([20,3])).toBe(3)}));it("of numbers",(function(){expect((0,_safeMin.default)([3,20])).toBe(3)}));it("of alphabets",(function(){expect((0,_safeMin.default)(["c","a","b"])).toBe("a")}));it("of numbers in string",(function(){expect((0,_safeMin.default)(["20","3"])).toBe("20")}));it("of numbers in string",(function(){expect((0,_safeMin.default)(["3","20"])).toBe("20")}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([NaN,1,2,3,4,5])).toBe(1)}));it("of numbers in array with Object",(function(){expect((0,_safeMin.default)([o,1,2,3,4,5])).toBe(1)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([1,2,3,4,5,NaN])).toBe(1)}));it("of numbers in array with Object",(function(){expect((0,_safeMin.default)([1,2,3,4,5,o])).toBe(1)}));it("of numbers in array with null undefined and NaN",(function(){expect((0,_safeMin.default)([10,null,3,undefined,5,NaN])).toBe(3)}));it("of numbers in array with null undefined and NaN",(function(){expect((0,_safeMin.default)([-1,null,-3,undefined,-5,NaN])).toBe(-5)}));it("of numbers and string number",(function(){expect((0,_safeMin.default)([20,"3"])).toBe("3")}));it("of numbers and string number",(function(){expect((0,_safeMin.default)(["20",3])).toBe(3)}));it("of numbers and string number",(function(){expect((0,_safeMin.default)([3,"20"])).toBe(3)}));it("of numbers and string number",(function(){expect((0,_safeMin.default)(["3",20])).toBe("3")}));it("of blank array",(function(){expect((0,_safeMin.default)([])).toBe(undefined)}));it("of numbers in array with null",(function(){expect((0,_safeMin.default)([null])).toBe(undefined)}));it("of numbers in array with undefined",(function(){expect((0,_safeMin.default)([undefined])).toBe(undefined)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([NaN])).toBe(undefined)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([NaN,NaN])).toBe(undefined)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([1].map(pack),unpack)).toBe(1)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([5,1,2,3,4].map(pack),unpack)).toBe(1)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([20,3].map(pack),unpack)).toBe(3)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([3,20].map(pack),unpack)).toBe(3)}));it("of alphanets",(function(){expect((0,_safeMin.default)(["c","a","b"].map(pack),unpack)).toBe("a")}));it("of string numbers",(function(){expect((0,_safeMin.default)(["20","3"].map(pack),unpack)).toBe("20")}));it("of string numbers",(function(){expect((0,_safeMin.default)(["3","20"].map(pack),unpack)).toBe("20")}));it("of numbers in array with  NaN",(function(){expect((0,_safeMin.default)([NaN,1,2,3,4,5].map(pack),unpack)).toBe(1)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([o,1,2,3,4,5].map(pack),unpack)).toBe(1)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([1,2,3,4,5,NaN].map(pack),unpack)).toBe(1)}));it("of numbers in array",(function(){expect((0,_safeMin.default)([1,2,3,4,5,o].map(pack),unpack)).toBe(1)}));it("of numbers in array with null undefined and NaN",(function(){expect((0,_safeMin.default)([10,null,3,undefined,5,NaN].map(pack),unpack)).toBe(3)}));it("of numbers in array with null undefined and NaN",(function(){expect((0,_safeMin.default)([-1,null,-3,undefined,-5,NaN].map(pack),unpack)).toBe(-5)}));it("of numbers and string numbers",(function(){expect((0,_safeMin.default)([20,"3"].map(pack),unpack)).toBe("3")}));it("of numbers and string numbers",(function(){expect((0,_safeMin.default)(["20",3].map(pack),unpack)).toBe(3)}));it("of numbers and string numbers",(function(){expect((0,_safeMin.default)([3,"20"].map(pack),unpack)).toBe(3)}));it("of numbers and string numbers",(function(){expect((0,_safeMin.default)(["3",20].map(pack),unpack)).toBe("3")}));it("of blank array",(function(){expect((0,_safeMin.default)([].map(pack),unpack)).toBe(undefined)}));it("of numbers in array with null",(function(){expect((0,_safeMin.default)([null].map(pack),unpack)).toBe(undefined)}));it("of numbers in array with undefined",(function(){expect((0,_safeMin.default)([undefined].map(pack),unpack)).toBe(undefined)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([NaN].map(pack),unpack)).toBe(undefined)}));it("of numbers in array with NaN",(function(){expect((0,_safeMin.default)([NaN,NaN].map(pack),unpack)).toBe(undefined)}))}));describe("testing the resulting array in given function",(function(){it("for safeMin",(function(){results=[];(0,_safeMin.default)(array,(function(d,i,arr){results.push([d,i,arr])}));expect(results).toEqual([["a",0,array],["b",1,array],["c",2,array]])}));it("for safeMin",(function(){results=[];(0,_safeMin.default)([1,2],(function(){results.push(this)}));expect(results).toEqual([undefined,undefined])}))}));