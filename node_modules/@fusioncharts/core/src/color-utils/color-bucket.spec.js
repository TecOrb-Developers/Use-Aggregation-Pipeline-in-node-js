"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _colorBucket=_interopRequireDefault(require("./color-bucket"));describe("Color Bucket test cases",(function(){var colorBucket=new _colorBucket.default,range;it("should return the details of the range in which the value falls",(function(){colorBucket.sortedColorArr=[{code:"#ff0000",minvalue:"0",maxvalue:"30",label:"BAD"},{code:"#00ff00",minvalue:"30",maxvalue:"70",label:"AVERAGE"},{code:"#0000ff",minvalue:"70",maxvalue:"100",label:"GOOD"}];range=colorBucket.getColorObj(40);expect(range.code).toBe("#00ff00");expect(range.label).toBe("AVERAGE")}));it("should return the details of the least range if the value is less than the minimum value of color range",(function(){colorBucket.sortedColorArr=[{code:"#ff0000",minvalue:"0",maxvalue:"30",label:"BAD"},{code:"#00ff00",minvalue:"30",maxvalue:"70",label:"AVERAGE"},{code:"#0000ff",minvalue:"70",maxvalue:"100",label:"GOOD"}];range=colorBucket.getColorObj(-10);expect(range.code).toBe("#ff0000");expect(range.label).toBe("BAD");expect(range.outOfRange).toBe(true)}));it("should return the details of the previous range if the value lies betweeen any two range",(function(){colorBucket.sortedColorArr=[{code:"#ff0000",minvalue:"0",maxvalue:"30",label:"BAD"},{code:"#00ff00",minvalue:"40",maxvalue:"70",label:"AVERAGE"},{code:"#0000ff",minvalue:"70",maxvalue:"100",label:"GOOD"}];range=colorBucket.getColorObj(35);expect(range.code).toBe("#ff0000");expect(range.label).toBe("BAD");expect(range.outOfRange).toBe(true)}));it("should return the details of the maximum range if the value is greater than the maximum value of color range",(function(){colorBucket.sortedColorArr=[{code:"#ff0000",minvalue:"0",maxvalue:"30",label:"BAD"},{code:"#00ff00",minvalue:"40",maxvalue:"70",label:"AVERAGE"},{code:"#0000ff",minvalue:"70",maxvalue:"100",label:"GOOD"}];range=colorBucket.getColorObj(135);expect(range.code).toBe("#0000ff");expect(range.label).toBe("GOOD");expect(range.outOfRange).toBe(true)}));it("should return the details of the first known range if two ranges overlap",(function(){colorBucket.sortedColorArr=[{code:"#ff0000",minvalue:"0",maxvalue:"30",label:"BAD"},{code:"#00ff00",minvalue:"40",maxvalue:"70",label:"AVERAGE"},{code:"#0000ff",minvalue:"10",maxvalue:"50",label:"GOOD"}];range=colorBucket.getColorObj(20);expect(range.code).toBe("#ff0000");expect(range.label).toBe("BAD")}))}));