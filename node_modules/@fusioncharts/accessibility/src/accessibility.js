/* eslint-disable no-fallthrough */
/* eslint-disable default-case */
import AccessibilityConfig from './configuration';
import { FCAccessibilitySingleSeries, FCAccessibilitySingleSeriesWithLegend } from './categories/singleSeries';
import FCAccessibilityMultiSeries from './categories/multiSeries';
import FCAccessibilityHeatMap from './categories/heatmapData';

(function () {
  if (typeof window.CustomEvent === 'function') return false;

  function CustomEvent (event, funcParams) {
    let params = funcParams;
    params = params || { bubbles: false, cancelable: false, detail: null };
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  }

  CustomEvent.prototype = window.Event.prototype;

  window.CustomEvent = CustomEvent;
})();

function AccessibilityExtension (FusionCharts) {
  /**
         *
         * @param {*} chartInstance
         * @param {*} chartType
         * If anchors are turned off for line, spline, radar etc then it's not possible to highlight plots
         * As a fix to the problem, anchors are rendered with zero alpha
         *
         * Returns true if anchors are modified, otherwise return false
         */

  let adjustZeroAnchor = (chartInstance, chartType) => {
      if (chartInstance.getChartAttribute('showanchors') === '0' || (chartType && (chartType === 'area2d' || chartType === 'msarea') && chartInstance.getChartAttribute('showanchors') !== '1')) {
        chartInstance.setChartAttribute({
          'showanchors': '1',
          'anchorbgalpha': '0',
          'anchoralpha': '0'
        });
        return true;
      }
      return false;
    },

    accesibilityTexts = FusionCharts.accesibilityTexts,
    accessibilityConfig = new AccessibilityConfig();
  function addAccessibilityMultiSeries (svgRoot, chartInstance, chartType) {
    let altTexts = accesibilityTexts.buildAriaTexts(chartInstance.id, 'multiSeries', chartType),
      multiSeriesAccessibility = new FCAccessibilityMultiSeries(svgRoot, chartInstance, altTexts, accessibilityConfig.getConfig());
    multiSeriesAccessibility.makeChartAccessible(multiSeriesAccessibility.makeMultiSeriesAccessible);
  }

  function addAccessibilitynonCartesian (svgRoot, chartInstance, chartType) {
    let altTexts = accesibilityTexts.buildAriaTexts(chartInstance.id, 'nonCartesian', chartType),
      nonCartesianAccessibility = new FCAccessibilitySingleSeriesWithLegend(svgRoot, chartInstance, altTexts, accessibilityConfig.getConfig());
    nonCartesianAccessibility.makeChartAccessible(nonCartesianAccessibility.makeSingleSeriesWithLegendAccessible);
  }

  function addAccessibilitySingleSeries (svgRoot, chartInstance, chartType) {
    let altTexts = accesibilityTexts.buildAriaTexts(chartInstance.id, 'singleSeries', chartType),
      singleSeriesAccessibility = new FCAccessibilitySingleSeries(svgRoot, chartInstance, altTexts, accessibilityConfig.getConfig());
    singleSeriesAccessibility.addAxisInformation();
    singleSeriesAccessibility.makeChartAccessible(singleSeriesAccessibility.makeSingleSeriesAccessible);
  }

  function addAccessibilityNestedData (svgRoot, chartInstance, chartType) {
    let altTexts = accesibilityTexts.buildAriaTexts(chartInstance.id, 'heatmap', chartType),
      nestedDataAccessibility = new FCAccessibilityHeatMap(svgRoot, chartInstance, altTexts, accessibilityConfig.getConfig());
    nestedDataAccessibility.makeChartAccessible(nestedDataAccessibility.makeNestedDataAccessible);
  }

  // eslint-disable-next-line good-practices/no-anonymous-handler
  FusionCharts.addEventListener('renderComplete', function (evt) {
    let chartInstance = evt.sender,
      // eslint-disable-next-line no-unused-vars
      spanContainer = document.getElementById(evt.sender.id),
      svgRoot = chartInstance.apiInstance.getFromEnv('paper').canvas,
      chartType = chartInstance.chartType();

    const accessibility = chartInstance.apiInstance.getFromEnv('dataSource').chart.accessibility;

    if (svgRoot && (accessibility === '1' || accessibility === 1)) {
      switch (chartType) {
        case 'msline':
        case 'msspline':
        case 'stackedarea2d':
        case 'msarea':
        case 'radar':
        case 'msstepline':
        case 'logmsline':
        case 'inversemsline':
        case 'inversemsarea':
        case 'sparkline':
        case 'mscombi2d':
        case 'mscombi3d':
        case 'mscombidy2d':
        case 'stackedcolumn2dline':
        case 'stackedcolumn3dline':
        case 'mscolumnline3d':
        case 'mscolumn3dlinedy':
        case 'stackedcolumn3dlinedy':
          // Check for zero anchor and modify anchor if not shown
          // If anchors are modified then break without adding acessibility
          // as another render complete event will trigger
          if (adjustZeroAnchor(chartInstance, chartType)) { break; }
        case 'mscolumn2d':
        case 'mscolumn3d':
        case 'msbar2d':
        case 'msbar3d':
        case 'stackedcolumn2d':
        case 'stackedcolumn3d':
        case 'stackedbar2d':
        case 'stackedbar3d':
        case 'scatter':
        case 'bubble':
        case 'inversemscolumn2d':
        case 'logmscolumn2d':
        case 'logstackedcolumn2d':
        case 'sparkcolumn':
        case 'sparkwinloss':
          addAccessibilityMultiSeries(svgRoot, chartInstance, chartType);
          break;
        case 'pie2d':
        case 'pie3d':
        case 'doughnut2d':
        case 'doughnut3d':
        case 'pyramid':
        case 'angulargauge':
        case 'hlineargauge':
        case 'hled':
        case 'vled':
        case 'bulb':
        case 'hbullet':
        case 'vbullet':
          addAccessibilitynonCartesian(svgRoot, chartInstance, chartType);
          break;
        case 'funnel':
          addAccessibilitynonCartesian(svgRoot, chartInstance, 'funnel');
          break;
        case 'line':
        case 'spline':
        case 'kagi':
        case 'area2d':
          // Check for zero anchor and modify anchor if not shown
          // If anchors are modified then break without adding acessibility
          // as another render complete event will trigger
          if (adjustZeroAnchor(chartInstance, chartType)) { break; }
        case 'column2d':
        case 'column3d':
        case 'bar2d':
        case 'bar3d':
          addAccessibilitySingleSeries(svgRoot, chartInstance, chartType);
          break;
        case 'waterfall2d':
          addAccessibilitySingleSeries(svgRoot, chartInstance, 'waterfall2d');
          break;
        case 'heatmap':
          addAccessibilityNestedData(svgRoot, chartInstance, chartType);
          break;
      }
    }
  });
}

export default {
  extension: AccessibilityExtension,
  name: 'AccessibilityExtension',
  type: 'extension',
  requiresFusionCharts: true
};
