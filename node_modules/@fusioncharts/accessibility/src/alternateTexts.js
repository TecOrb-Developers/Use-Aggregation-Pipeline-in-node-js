import { mergeDeep } from './util';

class BuildAlternateTexts {
  constructor (FusionCharts) {
    let accessibilityStringExtension = FusionCharts.getDep('accessibility-resources-strings', 'extension');
    this.alternateTexts = {};
    if (accessibilityStringExtension) {
      this.alternateTexts = accessibilityStringExtension();
    }
  }

  buildAriaTexts (chartId, chartCategory, chartType) {
    // First check if any alternate text template is specified by the user particularly for this chart
    let altTexts = (chartId && this.alternateTexts && this.alternateTexts[chartId]) || {},

      altTextCheckAndAdd = (prop) => {
        for (let obj in (this.alternateTexts['default'] && this.alternateTexts['default'][prop])) {
          if (!altTexts.hasOwnProperty(obj)) {
            altTexts[obj] = this.alternateTexts['default'][prop][obj];
          }
        }
      };

    // Next insert properties which are mentioned for the particular chart type but not present in previous category
    chartType && altTextCheckAndAdd(chartType);

    // Next insert properties which are mentioned for the particular chart type but not present in previous category
    chartCategory && altTextCheckAndAdd(chartCategory);

    // Finally insert properties which are not present in any of the previous 3 category
    altTextCheckAndAdd('base');

    return altTexts;
  }

  setAlternateTexts (config) {
    this.alternateTexts = mergeDeep(this.alternateTexts, config);
  }

  getAlternateTexts (chartId) {
    return this.alternateTexts;
  }
}

export default BuildAlternateTexts;
