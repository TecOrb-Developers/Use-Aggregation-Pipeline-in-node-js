/* eslint-disable no-fallthrough */
/* eslint-disable default-case */
import { crossBrowserFocus } from '../util';
import FCAccessibilityBase from './base';

const EMPTY = '';

/**
 * This class adds export as a accessibility feature
 */
class FCAccessibilityExportEnabled extends FCAccessibilityBase {
  // eslint-disable-next-line no-useless-constructor
  constructor (svgRoot, chartInstance, alternateTexts, config) {
    super(svgRoot, chartInstance, alternateTexts, config);
  }

  // Make chart export accessible
  makeExportAccessible () {
    if (this.chartData.chart.exportenabled) {
      const exportButton = this.svgRoot.querySelector(
          'g[class^=raphael][class$=toolbar] > [class$=button]'
        ),
        self = this,
        itemContainer = this.chartInstance.apiInstance
          .getFromEnv('chart-container')
          .querySelector('[type=div]'),
        items = itemContainer.childNodes;

      let keyCaptured = false,
        exportItemIndex = -1;
      this.addTabIndexAndSetAria(
        exportButton,
        this.alternateTexts.exportMenu,
        this.chartPropertyMap,
        '4',
        'button'
      );

      // eslint-disable-next-line no-inner-declarations
      function exportSelectOnKeyPress (event) {
        let elem = this;
        event.stopPropagation();
        switch (event.keyCode) {
          case 37:
            // left arrow
          case 38:
            // up arrow
            if (keyCaptured) {
              if (exportItemIndex > 0) {
                exportItemIndex = +elem.getAttribute('pIndex') - 1;
              } else if (exportItemIndex === -1) {
                exportItemIndex = items.length - 1;
              }
            }
            break;
          case 39:
            // right arrow
          case 40:
            // down arrow
            if (keyCaptured) {
              if (exportItemIndex > -1 && exportItemIndex < items.length - 1) {
                exportItemIndex = +elem.getAttribute('pIndex') + 1;
              } else if (exportItemIndex === -1) {
                exportItemIndex = 0;
              }
            }
            break;
          case 13:
            // Enter
          case 32:
            // spacebar
            if (exportItemIndex === -1) {
              if (keyCaptured) {
                self.chartInstance.apiInstance._env.hamburger.fireEvent('fc-mouseout');
              } else {
                self.chartInstance.apiInstance._env.hamburger.fireEvent('fc-mouseover');
              }
              keyCaptured = !keyCaptured;
            } else {
              self.chartInstance.apiInstance.getFromEnv('hamburger')._componentStore.listContainer.elemStore[0]._componentStore.item.elemStore[exportItemIndex].fireEvent('fc-click');
              exportItemIndex = -1;
              keyCaptured = false;
            }
            break;
          case 27:
            // escape
            crossBrowserFocus(exportButton);
            self.chartInstance.apiInstance._env.hamburger.fireEvent('fc-mouseout');
            keyCaptured = false;
            exportItemIndex = -1;
            break;
        }
        if (keyCaptured && exportItemIndex > -1) {
          crossBrowserFocus(items[exportItemIndex]);
          event.preventDefault();
        }
      }

      // Make Export Items Accessible
      for (let i = 0; i < items.length; i++) {
        let item = items[i];
        item.style.outline = EMPTY;
        self.addTabIndexAndSetAria(
          item,
          Array.isArray(self.alternateTexts.exportMenuItems) ? self.alternateTexts.exportMenuItems[i] : null,
          self.chartPropertyMap,
          i === 0 ? '4' : '-1',
          'button',
          { pIndex: i }
        );
        items[i].removeEventListener(
          'keydown',
          items[i].exportSelectOnKeyPress,
          false
        );
        items[i].exportSelectOnKeyPress = exportSelectOnKeyPress;
        items[i].addEventListener(
          'keydown',
          items[i].exportSelectOnKeyPress,
          false
        );
      }

      exportButton.addEventListener('keydown', exportSelectOnKeyPress);
    }
  }
}

export default FCAccessibilityExportEnabled;
