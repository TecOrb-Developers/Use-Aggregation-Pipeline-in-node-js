/**
 * Returns true if item is an object, otherwise false
 * @param {*} item
 */
let isObject = (item) => {
  return (item && typeof item === 'object' && !Array.isArray(item));
};

/**
 * Deep merge contents of multiple objects to return one single merged object
 * @param {*} target
 * @param {*} sources
 */
export function mergeDeep (target, ...sources) {
  if (!sources.length) return target;
  const source = sources.shift();

  if (isObject(target) && isObject(source)) {
    for (const key in source) {
      if (isObject(source[key])) {
        if (!target[key]) Object.assign(target, { [key]: {} });
        mergeDeep(target[key], source[key]);
      } else {
        Object.assign(target, { [key]: source[key] });
      }
    }
  }

  return mergeDeep(target, ...sources);
}

/**
 * Replace multiple sub strings of a string with another strin
 * The sub string and replaced string must be passed as key-value pair object format
 * @param {*} str
 * @param {*} mapObj
 */
export function replaceMultipleStrings (str, mapObj) {
  let re = new RegExp(Object.keys(mapObj).join('|'), 'gi');

  return str.replace(re, function (matched) {
    return mapObj[matched];
  });
}

/**
 * A cross browser focus function
 * @param {*} elemet
 */
export function crossBrowserFocus (elemet) {
  if (elemet.focus) {
    elemet.focus();
  }
  return elemet;
}

/**
 * Returns true if the browser is edge, false otherwise
 */
export function isEdge () {
  return navigator.userAgent.indexOf('Edge') >= 0;
}

/**
 * Returns true if the browser is IE, false otherwise
 */
export function isIE () {
  return /MSIE|Trident/.test(navigator.userAgent);
}
