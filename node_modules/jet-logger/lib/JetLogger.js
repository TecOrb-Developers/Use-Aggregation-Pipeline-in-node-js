"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JetLogger = exports.Formats = exports.LoggerModes = void 0;
var util_1 = __importDefault(require("util"));
var colors_1 = __importDefault(require("colors"));
var fs_1 = __importDefault(require("fs"));
var LoggerModes;
(function (LoggerModes) {
    LoggerModes["Console"] = "CONSOLE";
    LoggerModes["File"] = "FILE";
    LoggerModes["Custom"] = "CUSTOM";
    LoggerModes["Off"] = "OFF";
})(LoggerModes = exports.LoggerModes || (exports.LoggerModes = {}));
var Formats;
(function (Formats) {
    Formats["Line"] = "LINE";
    Formats["Json"] = "JSON";
})(Formats = exports.Formats || (exports.Formats = {}));
var levels = {
    info: {
        color: 'green',
        prefix: 'INFO',
    },
    imp: {
        color: 'magenta',
        prefix: 'IMPORTANT',
    },
    warn: {
        color: 'yellow',
        prefix: 'WARNING',
    },
    err: {
        color: 'red',
        prefix: 'ERROR',
    }
};
var errors = {
    customLoggerErr: 'Custom logger mode set to true, but no custom logger was provided.',
    modeErr: 'The correct logger mode was not specified: Must be "CUSTOM", "FILE", ' +
        '"OFF", or "CONSOLE".'
};
var defaults = {
    filepath: 'jet-logger.log',
    mode: LoggerModes.Console,
    timestamp: true,
    filepathDatetime: true,
    format: Formats.Line,
};
function JetLogger(mode, filepath, filepathDatetime, timestamp, format, customLogger) {
    var settings = getSettings(mode, filepath, timestamp, filepathDatetime, format, customLogger);
    return { settings: settings, info: info, imp: imp, warn: warn, err: err };
}
exports.JetLogger = JetLogger;
function getSettings(mode, filepath, filepathDatetime, timestamp, format, customLogger) {
    if (!mode) {
        if (!!process.env.JET_LOGGER_MODE) {
            mode = process.env.JET_LOGGER_MODE.toUpperCase();
        }
        else {
            mode = defaults.mode;
        }
    }
    if (!filepath) {
        if (!!process.env.JET_LOGGER_FILEPATH) {
            filepath = process.env.JET_LOGGER_FILEPATH;
        }
        else {
            filepath = defaults.filepath;
        }
    }
    if (filepathDatetime === undefined || filepathDatetime === null) {
        var envVar = process.env.JET_LOGGER_FILEPATH_DATETIME;
        if (!!envVar) {
            filepathDatetime = (envVar.toUpperCase() === 'TRUE');
        }
        else {
            filepathDatetime = defaults.filepathDatetime;
        }
    }
    if (timestamp === undefined || timestamp === null) {
        if (!!process.env.JET_LOGGER_TIMESTAMP) {
            timestamp = (process.env.JET_LOGGER_TIMESTAMP.toUpperCase() === 'TRUE');
        }
        else {
            timestamp = defaults.timestamp;
        }
    }
    if (!format) {
        if (!!process.env.JET_LOGGER_FORMAT) {
            format = process.env.JET_LOGGER_FORMAT.toUpperCase();
        }
        else {
            format = defaults.format;
        }
    }
    if (filepathDatetime) {
        filepath = addDatetimeToFileName(filepath);
    }
    return {
        mode: mode,
        filepath: filepath,
        filepathDatetime: filepathDatetime,
        timestamp: timestamp,
        format: format,
        customLogger: customLogger,
    };
}
function addDatetimeToFileName(filePath) {
    var dateStr = new Date().toISOString()
        .split('-').join('')
        .split(':').join('')
        .slice(0, 15);
    var filePathArr = filePath.split('/'), lastIdx = filePathArr.length - 1, fileName = filePathArr[lastIdx], fileNameNew = (dateStr + '_' + fileName);
    filePathArr[lastIdx] = fileNameNew;
    return filePathArr.join('/');
}
function info(content, printFull) {
    return printLog(content, printFull !== null && printFull !== void 0 ? printFull : false, levels.info, this.settings);
}
function imp(content, printFull) {
    return printLog(content, printFull !== null && printFull !== void 0 ? printFull : false, levels.imp, this.settings);
}
function warn(content, printFull) {
    return printLog(content, printFull !== null && printFull !== void 0 ? printFull : false, levels.warn, this.settings);
}
function err(content, printFull) {
    return printLog(content, printFull !== null && printFull !== void 0 ? printFull : false, levels.err, this.settings);
}
function printLog(content, printFull, level, settings) {
    var mode = settings.mode, format = settings.format, timestamp = settings.timestamp, filepath = settings.filepath, customLogger = settings.customLogger;
    if (mode === LoggerModes.Off) {
        return;
    }
    if (printFull) {
        content = util_1.default.inspect(content);
    }
    if (mode === LoggerModes.Custom) {
        if (!!customLogger) {
            return customLogger(new Date(), level.prefix, content);
        }
        else {
            throw Error(errors.customLoggerErr);
        }
    }
    if (format === Formats.Line) {
        content = setupLineFormat(content, timestamp, level);
    }
    else if (format === Formats.Json) {
        content = setupJsonFormat(content, timestamp, level);
    }
    if (mode === LoggerModes.Console) {
        var colorFn = colors_1.default[level.color];
        console.log(colorFn(content));
    }
    else if (mode === LoggerModes.File) {
        writeToFile(content + '\n', filepath)
            .catch(function (err) { return console.log(err); });
    }
    else {
        throw Error(errors.modeErr);
    }
}
function setupLineFormat(content, timestamp, level) {
    content = (level.prefix + ': ' + content);
    if (timestamp) {
        var time = '[' + new Date().toISOString() + '] ';
        return (time + content);
    }
    return content;
}
function setupJsonFormat(content, timestamp, level) {
    var json = {
        level: level.prefix,
        message: content,
    };
    if (timestamp) {
        json.timestamp = new Date().toISOString();
    }
    return JSON.stringify(json);
}
function writeToFile(content, filePath) {
    return new Promise(function (res, rej) {
        return fs_1.default.appendFile(filePath, content, (function (err) { return !!err ? rej(err) : res(); }));
    });
}
