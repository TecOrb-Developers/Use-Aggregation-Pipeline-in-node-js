{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./src/jquery-fusioncharts.js","webpack:///external \"jquery\"","webpack:///./src/transcoder-htmltable/transcoder-htmltable.js"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__1__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","jQuery","HTMLTableTranscoder","win","FusionCharts","addDep","renderFusionCharts","captureAllFusionChartsEvents","getChartObjectsFromSelection","configureLinkedCharts","doc","document","jQ","mathMin","Math","min","isArray","Array","objectToStringFn","toString","arrayToStringResult","subject","realtimeCommandMap","feed","setdata","setdataforid","getdata","getdataforid","clear","stop","start","optionsParser","feedData","options","stream","getData","isNaN","index","getDataForId","id","setData","label","arr","push","setDataForId","clearChart","stopUpdate","restartUpdate","elemList","chartOptions","cO","chartObj","scriptElement","length","parentNode","render","extend","renderAt","delayedRender","createElement","setAttribute","test","navigator","userAgent","opera","text","appendChild","createTextNode","eve","args","containerElement","event","Event","eventType","sender","containerElementId","trigger","addEventListener","obj","filter","add","find","chartObjects","linkConfigObj","level","each","this","configureLink","fn","insertFusionCharts","appendFusionCharts","insertMode","prependFusionCharts","attrFusionCharts","attr","attrVal","transfer","undefined","setChartAttribute","getChartAttribute","updateFusionCharts","fcChart","renderFlag","optStr","filterOpts","updateOptions","type","swfUrl","clone","dataSource","dataFormat","setChartData","width","height","resizeTo","chartType","cloneFusionCharts","callback","temp","disposeFusionCharts","dispose","_fcDrillDownLevel","convertToFusionCharts","chartOpts","convertOpts","transferObj","dataConfiguration","insertBefore","drillDownFusionChartsTo","j","len","configureOpts","arguments","streamFusionChartsData","command","method","params","toLowerCase","apply","expr","merge","obj1","obj2","item","str","sink","source","proto","deep","sanitizeNodesArray","nodeArr","sanitizedArr","nodeType","getTextFromNode","nodeEle","innerText","textContent","getColumnArr","rowArr","cellArr","rowSpanInc","columnArrIdx","colSpan","rowSpan","returnObj","childNodes","rowNum","row","col","parseInt","getAttribute","arrayContains","checkData","childArr","parseFloat","_blankNo","getLabels","ignoreArr","opts","spanLen","isRowLabel","maxIdx","spanLength","tLabels","mostEmptyCellRow","internalLabel","emptyCellCount","textCellCount","spanTotal","totalSpanLength","labelObj","_extractByHeaderTag","nodeName","_rowLabelIndex","replace","extractDataFromTable","tbl","getElementById","data","hideTable","style","display","rowCells","cellText","mapColumnIdx","columnSpan","cellEle","rowLabelMap","columnLabelMap","tempMap","dataMap","columnSpanObj","rowSpanObj","tableRows","tbodyArr","getThead","concat","getTbody","dataRows","dataColumns","tempColumn","k","isSingleSeries","indexOf","rowLabelSource","labelSource","colLabelSource","legendSource","major","useLabels","ignoreCols","useLegend","ignoreRows","convertBlankTo","labelMap","legendMap","htmlTableToJSON","item1","item2","categoryArr","datasetArr","dataObj","chartAttributes","showLabels","showLegend","seriesColors","labels","legend","config","chartJSON","datasets","chart","categories","category","dataset","seriesname","error","createChartFromTable","setHTMLTableData","dom","extension","format","toJSON","requiresFusionCharts"],"mappings":"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","file":"fusioncharts.jqueryplugin.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"jquery\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"jquery\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"jquery\")) : factory(root[\"jquery\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","var jQuery = require('jquery');\nvar HTMLTableTranscoder = require('./transcoder-htmltable/transcoder-htmltable');\n\nvar win = typeof window !== 'undefined' ? window : {};\n\nif (typeof FusionCharts === 'undefined') {\n    FusionCharts = win.FusionCharts;\n}\nif (typeof jQuery === 'undefined') {\n    jQuery = win.jQuery;\n}\n\nFusionCharts.addDep(HTMLTableTranscoder);\n\nvar doc = win.document,\n    jQ = jQuery,\n    renderFusionCharts,\n    captureAllFusionChartsEvents,\n    getChartObjectsFromSelection,\n    configureLinkedCharts,\n    math = win.Math,\n    mathMin = math.min,\n    // FusionCharts = FusionCharts,\n    isArray = (function () {\n        // Use compiler's own isArray when available\n        if (Array.isArray) {\n            return Array.isArray;\n        }\n\n        // Retain references to variables for performance optimization\n        var objectToStringFn = Object.prototype.toString,\n            arrayToStringResult = objectToStringFn.call([]);\n\n        return function (subject) {\n            return objectToStringFn.call(subject) === arrayToStringResult;\n        };\n    }()),\n    realtimeCommandMap = {\n        feed: 'feedData',\n        setdata: 'setData',\n        setdataforid: 'setDataForId',\n        getdata: 'getData',\n        getdataforid: 'getDataForId',\n        clear: 'clearChart',\n        stop: 'stopUpdate',\n        start: 'restartUpdate'\n    },\n    optionsParser = {\n        feedData: function (options) {\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.stream) {\n                return [options.stream];\n            }\n            else {\n                return false;\n            }\n        },\n        getData: function (options) {\n            // index is passed in case of multivalue charts.\n            if (!isNaN(options)) {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.index) {\n                return [options.index];\n            }\n            else {\n                return [];\n            }\n        },\n        getDataForId: function (options) {\n            // index is passed in case of multivalue charts.\n            if (typeof options === 'string') {\n                return [options];\n            }\n            else if (typeof options === 'object' && options.id) {\n                return [options.id];\n            }\n            else {\n                return [];\n            }\n        },\n        setData: function (options, value, label) {\n            var arr = [];\n            if (typeof options !== 'object') {\n                arr = [options, value, label];\n            }\n            else {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        setDataForId: function (options, value, label) {\n            var arr = [];\n            if (typeof options === 'string' || typeof value === 'string' ||\n                    typeof label === 'string') {\n                arr = [options, value, label];\n            }\n            else if (typeof options === 'object') {\n                options.value && arr.push(options.value);\n                options.label && arr.push(options.label);\n            }\n\n            return arr;\n        },\n        clearChart: function (options) {\n            return [options];\n        },\n        stopUpdate: function (options) {\n            return [options];\n        },\n        restartUpdate: function (options) {\n            return [options];\n        }\n    };\n\n// Assign FusionCharts object to global jQuery object for easy use.\njQ.FusionCharts = FusionCharts;\n\n/**\n * Used purely for rendering the FusionCharts.\n * Acts as a common method that is invoked by all the APIs that create a\n * FusionChart object\n *\n * @param {array} elemList is a list of all the HTML elements that\n * are selected using the jQuery selectors\n *\n * @param {object} chartOptions is the options that are to be passed to\n * the FusionCharts contructor.\n */\n\nrenderFusionCharts = function (elemList, chartOptions) {\n    var i,\n        l,\n        cO,\n        chartObj,\n        scriptElement;\n\n    if (isArray(chartOptions) || chartOptions instanceof jQ) {\n        l = mathMin(elemList.length, chartOptions.length);\n    }\n    else {\n        l = elemList.length;\n    }\n\n    for (i = 0; i < l; i += 1) {\n\n        // One-to-one mapping with the HTML elements in case of\n        // multiple option objects.\n        if (isArray(chartOptions) || chartOptions instanceof jQ) {\n            cO = chartOptions[i];\n        } else {\n            cO = chartOptions;\n        }\n\n        // check if the element is appended to the window document or not.\n        if (elemList[i].parentNode) {\n            // Adding the renderAt option to the chartOptions tells the\n            // constructor where to render the FusionCharts object.\n            FusionCharts.render(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n        } else {\n            chartObj = new FusionCharts(jQ.extend({}, cO, {\n                renderAt: elemList[i]\n            }));\n\n            if (!jQ.FusionCharts.delayedRender) {\n                jQ.FusionCharts.delayedRender = {};\n            }\n            jQ.FusionCharts.delayedRender[chartObj.id] = elemList[i];\n\n            scriptElement = doc.createElement('script');\n            scriptElement.setAttribute('type', 'text/javascript');\n\n            if (/msie/i.test(win.navigator.userAgent) && !win.opera) {\n                scriptElement.text = 'FusionCharts.items[\\'' + chartObj.id + '\\'].render();';\n            } else {\n                scriptElement.appendChild(\n                    doc.createTextNode('FusionCharts.items[\\'' + chartObj.id + '\\'].render()')\n                );\n            }\n            elemList[i].appendChild(scriptElement);\n        }\n    }\n    return elemList;\n};\n\n/**\n *  Using jQuery's event model for attaching handlers to FusionCharts events.\n *  This is achieved by listening to the FusionCharts \"*\" event and then\n *  triggering a jQuery event on the associated DOM element.\n */\ncaptureAllFusionChartsEvents = function (eve, args) {\n    var containerElement,\n        event;\n\n    // Extending our event with the jQuery event model for proper\n    // delegation and bubbling.\n    event = jQ.extend({}, eve);\n    jQ.extend(event, jQ.Event('fusioncharts' + eve.eventType));\n\n    // Checking if there is an associated DOM object\n    if (event.sender && event.sender.options) {\n        containerElement = event.sender.options.containerElement ||\n            event.sender.options.containerElementId;\n\n        if (typeof containerElement === 'object') {\n            jQ(containerElement).trigger(event, args);\n        }\n        else if (jQ('#' + containerElement).length) {\n            jQ('#' + containerElement).trigger(event, args);\n        }\n        else {\n            jQ(doc).trigger(event, args);\n        }\n    } else {\n        // If there is no DOM object associated with the FusionCharts object\n        // then triggering the event on the document itself for any possible\n        // global handlers that might want to capture it.\n        jQ(doc).trigger(event, args);\n    }\n};\n\nFusionCharts.addEventListener('*', captureAllFusionChartsEvents);\n\n/**\n * Used to select all the HTML object/embed elements that have been created\n * using the FusionCharts constructor\n *\n * @param {jQuery} obj, the selection of elements that need to be processed.\n *\n */\ngetChartObjectsFromSelection = function (obj) {\n\n    // The HTML object/embed may be part of the current selection or a\n    // child of the current selection. Need to take both cases into account.\n    // @note If the FusionCharts object has not been rendered yet, e.g in\n    // case the container is not appended to the document, then 'find' for\n    // that element will NOT return the corresponding FusionCharts object.\n    return obj.filter(':FusionCharts').add(obj.find(':FusionCharts'));\n};\n\n/**\n *  Used to configure the links at various levels in a linked chart.\n *\n *  @param {jQuery} chartObjects The FusionCharts objects for which the link\n *  has to be configured.\n *\n *  @param {object} linkConfigObj contains the configuration details of the\n *  linked chart like swfUrl, height, width etc.\n *\n *  @param {string} level contains the level at which the user wants to\n *  configure the link.\n *\n */\nconfigureLinkedCharts = function (chartObjects, linkConfigObj, level) {\n\n    if (typeof linkConfigObj === 'object') {\n        chartObjects.each(function () {\n            this.configureLink(linkConfigObj, level);\n        });\n    }\n};\n\n/**\n * @id: jQuery.fn.insertFusionCharts\n * @id: $.fn.insertFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Inserts the FusionCharts objects in the HTML elements that are selected\n * by the jQuery selector.\n */\njQ.fn.insertFusionCharts = function (options) {\n    return renderFusionCharts(this, options);\n\n};\n\n/**\n * @id: jQuery.fn.appendFusionCharts\n * @id: $.fn.appendFusionCharts\n *\n * @param {object} options contains that parameters that need to be passed\n * to the FusionCharts constructor\n *\n * Appends the FusionCharts objects immediately after the HTML elements\n * that are selected by the jQuery selector.\n */\njQ.fn.appendFusionCharts = function (options) {\n    options.insertMode = 'append';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.prependFusionCharts\n * @id: $.fn.prependFusionCharts\n *\n * @param {object} options contains the parameters that need to be passed\n * to the FusionCharts constructor\n *\n *  Prepends the FusionCharts objects before the HTML elements that are\n *  selected by the jQuery selector.\n */\njQ.fn.prependFusionCharts = function (options) {\n    options.insertMode = 'prepend';\n    return renderFusionCharts(this, options);\n};\n\n/**\n * @id: jQuery.fn.attrFusionCharts\n * @id: $.fn.attrFusionCharts\n *\n * @param {object|string} attr, If this is a string then it contains\n * the FusionCharts object's attribute that needs to be set or fetched.\n * If it is an object then, it contains the attributes along with the\n * corresponding values that need to be set on the FusionCharts object\n *\n * @param {string} attrVal, To be used if attr is a string. Contains the\n * value that needs to be set for the attribute that attr corresponds to.\n *\n *  Used to set or get the attribute(s) of the FusionCharts object.\n */\njQ.fn.attrFusionCharts = function (attr, attrVal) {\n\n    /**\n     * @ignore\n     * @todo Remove ignore\n     *\n     * @var {jQuery} chartsObjects stores the FusionCharts objects in\n     * the selected HTML elements.\n     * @var {object} transfer Holds all atttributes to be returned to the\n     * callee Function.\n     */\n    var transfer = [],\n        chartObjects = getChartObjectsFromSelection(this);\n\n    if (attrVal !== undefined) {\n        // Set the charts attribute attr with value attrVal.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr, attrVal);\n        });\n        return this;\n    }\n    if (typeof attr === 'object') {\n            // Set the charts attributes, in the passed object's keys with\n            // the corresponding values.\n\n        chartObjects.each(function () {\n            this.FusionCharts.setChartAttribute(attr);\n        });\n        return this;\n    }\n\n    // If both the above cases fail, user is trying to, in accordance with the\n    // jQuery paradigm, get the value of the arrtibute.\n    chartObjects.each(function () {\n        transfer.push(\n            this.FusionCharts.getChartAttribute(attr)\n        );\n    });\n    return transfer;\n};\n\n/**\n * @id jQuery.fn.updateFusionCharts\n * @id $.fn.updateFusionCharts\n *\n * @param {object} options Contains the new options that the FusionCharts\n * objects need to update themselves with. Currently, using this interface\n * the dataType, data, width, height, debugMode and swfUrl can be updated.\n */\njQ.fn.updateFusionCharts = function (options) {\n\n    var filterOpts = {},\n        chartObjects = getChartObjectsFromSelection(this),\n        updateOptions = [\n            ['swfUrl', false],\n            ['type', false],\n            ['height', false],\n            ['width', false],\n            ['containerBackgroundColor', true],\n            ['containerBackgroundAlpha', true],\n            ['dataFormat', false],\n            ['dataSource', false]\n        ],\n        i,\n        l,\n        fcChart,\n        renderFlag,\n        optStr,\n        newChart;\n\n    for (i = 0, l = updateOptions.length; i < l; i += 1) {\n        optStr = updateOptions[i][0];\n        filterOpts.type = filterOpts.type || filterOpts.swfUrl;\n        if (options[optStr]) {\n            if (updateOptions[i][1]) {\n                renderFlag = true;\n            }\n            filterOpts[optStr] = options[optStr];\n        }\n    }\n\n    chartObjects.each(function () {\n        // If height and width are given then resize the chart first.\n        fcChart = this.FusionCharts;\n        if (renderFlag) {\n            newChart = fcChart.clone(filterOpts);\n            newChart.render();\n            return;\n        }\n\n        if (filterOpts.dataSource !== undefined || filterOpts.dataFormat !== undefined) {\n            if (filterOpts.dataSource === undefined) {\n                fcChart.setChartData(fcChart.args.dataSource, filterOpts.dataFormat);\n            } else if (filterOpts.dataFormat === undefined) {\n                fcChart.setChartData(filterOpts.dataSource, fcChart.args.dataFormat);\n            } else {\n                fcChart.setChartData(filterOpts.dataSource, filterOpts.dataFormat);\n            }\n        }\n        if (filterOpts.width !== undefined || filterOpts.height !== undefined) {\n            fcChart.resizeTo(filterOpts.width, filterOpts.height);\n        }\n        if (filterOpts.type) {\n            fcChart.chartType(filterOpts.type);\n        }\n    });\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.cloneFusionCharts\n *  @id: $.fn.cloneFusionCharts\n *\n *  @param {object} options The options object that takes the additional\n *  parameters to be passed while cloning the FusionCharts object.\n *\n *  @param {function} callback The callback function that has to be called\n *  once the FusionCharts objects have been cloned. This function will take\n *  the new clone objects as parameter.\n *\n */\njQ.fn.cloneFusionCharts = function (callback, options) {\n\n    var transfer,\n        temp,\n        chartObjects;\n\n    // Check if the options parameter, which is not mandatory, has been\n    // passed or not. If not, that means that options is the callback function.\n    if (typeof callback !== 'function' && typeof options === 'function') {\n        temp = callback;\n        callback = options;\n        options = temp;\n    }\n\n    transfer = [];\n    chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        transfer.push(this.FusionCharts.clone(options, {}, true));\n    });\n\n    callback.call(jQ(transfer), transfer);\n\n    return this;\n};\n\n/**\n *  @id: jQuery.fn.disposeFusionCharts\n *  @id: $.fn.disposeFusionCharts\n *\n */\njQ.fn.disposeFusionCharts = function () {\n\n    var chartObjects = getChartObjectsFromSelection(this);\n\n    chartObjects.each(function () {\n        // Execute dispose on charts.\n        this.FusionCharts.dispose();\n\n        // Remove identifier reference variable\n        delete this.FusionCharts;\n\n        // cleanup any static objects pertaining to FusionCharts.\n        if (this._fcDrillDownLevel === 0) {\n            delete this._fcDrillDownLevel;\n        }\n    });\n\n    return this;\n};\n\n/**\n * @id jQuery.fn.covertToFusionCharts\n * @id $.fn.convertToFusionCharts\n *\n * @param {object} chartOpts Configuration options to generate FusionCharts.\n * See documentation to get the list.\n *\n * @param {object} convertOpts Configuration options to convert the table\n * into a FusionCharts object.\n * See documentation to get the list.\n *\n */\njQ.fn.convertToFusionCharts = function (chartOpts, convertOpts) {\n\n    var transferObj = [];\n\n    if (typeof chartOpts.dataConfiguration === 'undefined') {\n        chartOpts.dataConfiguration = {};\n    }\n\n    jQ.extend(true, chartOpts.dataConfiguration, convertOpts);\n\n    if (!chartOpts.dataSource) {\n        chartOpts.dataSource = this.get(0);\n    }\n\n    if (!chartOpts.renderAt) {\n        this.each(function () {\n            transferObj.push(jQ('<div></div>')\n                .insertBefore(this)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        });\n    }\n    else {\n        if (typeof chartOpts.renderAt === 'string') {\n            transferObj.push(jQ('#' + chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n        else if (typeof chartOpts.renderAt === 'object') {\n            transferObj.push(jQ(chartOpts.renderAt)\n                .insertFusionCharts(chartOpts).get(0)\n            );\n        }\n    }\n\n    return jQ(transferObj);\n};\n\n/**\n * @id jQuery.fn.drillDownFusionChartsTo\n * @id $.fn.drillDownFusionChartsTo\n *\n * Used to set multi-level configurations of linked FusionCharts objects.\n * The levels are iterated depending on the number of configuration objects\n * in a single jQuery chain.\n *\n * To set the configuration at a specific level please refer to docs.\n */\njQ.fn.drillDownFusionChartsTo = function () {\n    var chartObjects = getChartObjectsFromSelection(this),\n        j,\n        len,\n        i,\n        l,\n        configureOpts;\n\n\n    // hack to support chaining of multiple drillDowns in a single chain\n    if (typeof this._fcDrillDownLevel === 'undefined') {\n        this._fcDrillDownLevel = 0;\n    }\n\n    for (j = 0, len = arguments.length; j < len; j += 1) {\n        configureOpts = arguments[j];\n\n        if (isArray(configureOpts)) {\n            for (i = 0, l = configureOpts.length; i < l; i += 1) {\n                configureLinkedCharts(chartObjects, configureOpts[i], this._fcDrillDownLevel);\n                this._fcDrillDownLevel += 1;\n            }\n        } else {\n            configureLinkedCharts(chartObjects, configureOpts, this._fcDrillDownLevel);\n            this._fcDrillDownLevel += 1;\n        }\n    }\n    return this;\n};\n\n/**\n * @id jQuery.fn.streamFusionChartsData\n * @id $.fn.streamFusionChartsData\n *\n * @param {string} command. Contains the type of operation to be performed on\n * the realtime charts. If not provided, by default the command would be 'feed'\n * that invokes the feedData method of the chart and passes the options to it.\n *\n * @param {object} options. Contains the options that has to be parsed (if it is a js object)\n * and passed to the chart method (corresponding to command).\n * If not an object, it is passed as is to the chart method.\n *\n * @param {object} value. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n *\n * @param {object} label. To make the API morph the data setter methods (setData, setDataForId),\n * it can also be passed the same parameters as the setter functions.\n**/\n\njQ.fn.streamFusionChartsData = function (command, options, value, label) {\n\n    var chartObjects = getChartObjectsFromSelection(this),\n        transfer = [],\n        fcChart,\n        method,\n        params;\n\n    // Convert the command to lower case and fetch the proper chart method name.\n    method = realtimeCommandMap[command && command.toLowerCase()];\n\n    // Check if the command provided is valid or not.\n    if (method === undefined) {\n        // this means the command is not a getter. which in turn means that\n        // the command is a data stream string and has to be handled accordingly.\n        if (arguments.length === 1) {\n            params = [command];\n            method = realtimeCommandMap.feed;\n        }\n        else {\n            return this;\n        }\n    }\n    else if (arguments.length === 1) {\n        // command is to invoke a method without any parameters..\n        params = [];\n    }\n    else {\n        // optionsParser returns an array of parameters to be passed to the\n        // chart method.\n        params = optionsParser[method](options, value, label);\n    }\n\n    if (method === 'getData' || method === 'getDataForId') {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                transfer.push(fcChart[method].apply(fcChart, params));\n            }\n        });\n        return transfer;\n    }\n    else {\n        chartObjects.each(function () {\n            fcChart = this.FusionCharts;\n            if (typeof fcChart[method] === 'function') {\n                fcChart[method].apply(fcChart, params);\n            }\n        });\n        return this;\n    }\n};\n\njQ.extend(jQ.expr[':'], {\n    /**\n     *  Extending the jQuery selector to select all object/embed elements that\n     *  have been created using the FusionCharts constructor i.e that are an\n     *  instance of FusionCharts.\n     *\n     *  @param {object} obj, Is the HTML element that is currently being\n     *  checked.\n     */\n    FusionCharts: function (obj) {\n        return (obj.FusionCharts instanceof FusionCharts);\n    }\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","var win = window,\n    doc = win.document,\n    objectToStringFn = Object.prototype.toString,\n    merge = function (obj1, obj2) {\n        var item, str;\n        //check whether obj2 is an array\n        //if array then iterate through it's index\n        //**** MOOTOOLS precution\n        if (obj2 instanceof Array) {\n            for (item = 0; item < obj2.length; item += 1) {\n                if (typeof obj2[item] !== 'object') {\n                    obj1[item] = obj2[item];\n                } else {\n                    if (typeof obj1[item] !== 'object') {\n                        obj1[item] = obj2[item] instanceof Array ? [] : {};\n                    }\n                    merge(obj1[item], obj2[item]);\n                }\n            }\n        }\n        else {\n            for (item in obj2) {\n                if (typeof obj2[item] === 'object') {\n                    str = objectToStringFn.call(obj2[item]);\n                    if (str === '[object Object]') {\n                        if (typeof obj1[item] !== 'object') {\n                            obj1[item] = {};\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else if (str === '[object Array]') {\n                        if (!(obj1[item] instanceof Array)) {\n                            obj1[item] = [];\n                        }\n                        merge(obj1[item], obj2[item]);\n                    }\n                    else {\n                        obj1[item] = obj2[item];\n                    }\n                }\n                else {\n                    obj1[item] = obj2[item];\n                }\n            }\n        }\n        return obj1;\n    },\n    extend = function (sink, source, proto, deep) {\n        var item;\n        // When 'proto' is marked as true, the methods and properties\n        // of source is not added to the prototype of the sink.\n        if (proto && sink.prototype) {\n            sink = sink.prototype;\n        }\n\n        // If deep extend is specified, then we use the deep copy function\n        // 'merge'\n        if (deep === true) {\n            merge(sink, source);\n        }\n        // Copy all methods and properties of the object passed in parameter\n        // to the object to which this function is attached.\n        else {\n            for (item in source) {\n                sink[item] = source[item];\n            }\n        }\n\n        return sink;\n    },\n    /**\n     *  Used to remove all textNodes in an array of nodes. Textnodes get created\n     *  inadvertently, when the table HTML has newline and space. Returns an\n     *  array of nodes that is not an HTMLCollection and has only the non-text\n     *  nodes in it.\n     *\n     *  @param {array} nodeArr Contains the array of nodes that have to be\n     *  sanitized.\n     */\n    sanitizeNodesArray = function (nodeArr) {\n        var l, i, sanitizedArr = [];\n        for (i = 0, l = nodeArr.length; i < l; i += 1) {\n            // if nodeType != 3 then the node is not a text node.\n            if (nodeArr[i].nodeType !== 3) {\n                sanitizedArr.push(nodeArr[i]);\n            }\n        }\n        return sanitizedArr;\n    },\n\n\n    /**\n     * Used to merge two JSON objects. The copy is a deep copy and not a\n     * reference copy.\n     *\n     * @param: {object} srcJSON, the source json.\n     *\n     * @param: {object} targetJSON, that json that needs to be merged with the\n     * source json.\n     *\n     */\n    mergeJSON = function (srcJSON, targetJSON) {\n        var i,\n            len,\n            item;\n\n        if (targetJSON instanceof Array) {\n            for (i = 0, len = targetJSON.length; i < len; i++) {\n                if (targetJSON[i] instanceof Array) {\n                    if (srcJSON[i] === undefined) {\n                        srcJSON[i] = [];\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else if (typeof targetJSON[i] === 'object') {\n                    if (typeof srcJSON[i] === 'undefined') {\n                        srcJSON[i] = {};\n                    }\n                    mergeJSON(srcJSON[i], targetJSON[i]);\n                } else {\n                    srcJSON[i] = targetJSON[i];\n                }\n            }\n        } else if (typeof targetJSON === 'object') {\n            for (item in targetJSON) {\n                if (typeof srcJSON[item] === 'undefined') {\n                    if (targetJSON[item] instanceof Array) {\n                        srcJSON[item] = [];\n                        mergeJSON(srcJSON[item], targetJSON[item]);\n                    } else if (typeof srcJSON[item] === 'object') {\n                        srcJSON[i] = {};\n                        mergeJSON(srcJSON[i], targetJSON[i]);\n                    } else {\n                        srcJSON[i] = targetJSON[i];\n                    }\n                }\n            }\n        }\n\n        return srcJSON;\n    },\n\n    /**\n     *  Returns the <tbody> element of the table. In order to support W3C\n     *  non-compliant HTML, wherein the table does not have a <tbody> containing\n     *  the <tr> & <td> elements, the table itself is returned.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getTbody = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'TBODY') {\n                return tbodyArr[0];\n            }\n            else if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[1];\n            }\n        }\n        return tbl;\n    },\n\n    /**\n     *  Returns an array containing the <td> in the <thead> tag.\n     *\n     *  @param {object} tbl Is the table whose tbody needs to fetched.\n     *\n     */\n    getThead = function (tbl) {\n        var tbodyArr = sanitizeNodesArray(tbl.childNodes);\n\n        // Checking if the table's childNode is a tbody or not\n        if (tbodyArr.length) {\n            if (tbodyArr[0].nodeName === 'THEAD' && tbodyArr[1] && tbodyArr[1].nodeName === 'TBODY') {\n                return tbodyArr[0].childNodes;\n            }\n        }\n        return [];\n    },\n\n    /**\n     *  Used to return the text in a given Element. Needed as firefox does not\n     *  support 'innerText', which is a W3C standard and instead uses\n     *  textContent attribute to store the text.\n     *\n     *  @param {object} nodeEle The HTML element whose text is needed.\n     */\n    getTextFromNode = function (nodeEle) {\n        return (nodeEle.innerText !== undefined) ? nodeEle.innerText : nodeEle.textContent;\n    },\n\n    /**\n     *  Used to convert an array of rows into an array of corresponding columns.\n     *\n     *  @param {array} rowArr The array of table rows that has to be transposed\n     *  into an array of columns.\n     */\n    getColumnArr = function (rowArr) {\n\n        var i,\n            j,\n            l,\n            len,\n            cellArr,\n            rowSpanInc,\n            colSpan = 1,\n            columnArrIdx,\n            rowSpan = {},\n            returnObj = [];\n\n        for (i = 0, l = rowArr.length; i < l; i += 1) {\n\n            // get all the cells of the row\n            cellArr = sanitizeNodesArray(rowArr[i].childNodes);\n            colSpan = 1;\n            rowSpanInc = 0;\n            for (j = 0, len = cellArr.length; j < len; j += 1) {\n\n                // if a previous row had a cell with a rowspan then this\n                // rowspan needs to be taken into account while creating\n                // column array.\n                columnArrIdx = j + colSpan + rowSpanInc - 1;\n                if (rowSpan[columnArrIdx] &&\n                        ((i - rowSpan[columnArrIdx].rowNum) < rowSpan[columnArrIdx].row)) {\n                    rowSpanInc += rowSpan[columnArrIdx].col;\n                    columnArrIdx += rowSpan[columnArrIdx].col;\n                }\n\n                if (parseInt(cellArr[j].getAttribute('rowspan'), 10) > 1) {\n                    if (!rowSpan[columnArrIdx]) {\n                        rowSpan[columnArrIdx] = {};\n                    }\n                    rowSpan[columnArrIdx].rowNum = i;\n                    rowSpan[columnArrIdx].row = parseInt(cellArr[j].getAttribute('rowspan'), 10);\n                    // If the cell has both a rowspan and a colspan then they\n                    // both need to be taken into consideration while calculating\n                    // the column of cells in the susequent rows\n                    if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                        rowSpan[columnArrIdx].col = parseInt(cellArr[j].getAttribute('colspan'), 10);\n                    } else {\n                        rowSpan[columnArrIdx].col = 1;\n                    }\n                }\n\n                // The previous cells colspan, and the previous rows rowspans\n                // also needs to be added to the current cells index to get the\n                // proper column index.\n                while (returnObj.length <= columnArrIdx) {\n                    returnObj.push({childNodes: []});\n                }\n                returnObj[columnArrIdx].childNodes.push(cellArr[j]);\n\n                // Adding the current cells colspan for subsequent cells in the\n                // current row.\n                if (parseInt(cellArr[j].getAttribute('colspan'), 10) > 1) {\n                    colSpan += parseInt(cellArr[j].getAttribute('colspan'), 10) - 1;\n                }\n            }\n        }\n\n        return returnObj;\n    },\n\n    /**\n     * Used to check if an item is present in an array or not.\n     *\n     * @param {array} arr The array which has to be checked\n     *\n     * @param {string|number|object} item The item which needs be checked if\n     * present in array arr or not.\n     */\n    arrayContains = function (arr, item) {\n        var i = arr.length;\n        // Using a decrementing while loop (optimization) since the order in which the\n        // array is traversed doesn't matter.\n        while (i) {\n            i -= 1;\n            if (arr[i] === item) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Used to check if a particular row or column has all non numeric (or blank)\n     * content. If so, then that particular row/column must be ignored.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {number} index of the row/column that is not to be analysed as it\n     * has already been set aside as the label row/column.\n     *\n     * @param {number} j is the cell index at which we have to check for the\n     * presence of numeric data in all the other rows and columns.\n     */\n\n    checkData = function (nodeArr, j, index) {\n\n        var i,\n            l,\n            childArr = sanitizeNodesArray(nodeArr[j].childNodes),\n            text;\n\n        for (i = 0, l = childArr.length; i < l; i += 1) {\n            if (i !== index) {\n                text = getTextFromNode(childArr[i]);\n                if (parseFloat(text) === text) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    },\n\n    _blankString = '__fcBLANK__',\n    _blankNo = 0,\n    /**\n     * Used to get the table row that has the labels (categories or legend) and\n     * extract the label details from the corresponding row.\n     *\n     * @param {array} nodeArr Is an array of all the rows/columns of the table.\n     *\n     * @param {array} ignoreArr Is an array of all the indexes in the nodeArr\n     * that need to be ignored. The items of this array can be negative as well.\n     *\n     * @param {string} index If the label row/column details have been given by\n     * the user then this will contain the index which has the labels.\n     *\n     */\n    getLabels = function (nodeArr, ignoreArr, index, opts) {\n\n        var len, l, i, j, childArr, mostEmptyCellRow = null, internalLabel = [],\n            emptyCellCount = [], textCellCount = 0, temp, returnObj = {},\n            spanTotal = 0, spanLen, isRowLabel, maxIdx, spanLength, totalSpanLength = 0, tLabels;\n\n\n        if (typeof index === 'undefined') {\n        // Checking if the user has provided the index. If index has not been\n        // passed then we assume that the user does not want to give a label row\n        // or column.\n\n            // Creating custom labels for all cells in the first row/column.\n            childArr = sanitizeNodesArray(nodeArr[0].childNodes);\n            for (j = 0, len = childArr.length; j < len; j += 1) {\n                spanLen = j + spanTotal;\n                internalLabel[spanLen] = _blankString + (spanLen + 1);\n\n                temp = parseInt(childArr[j].colSpan, 10);\n                temp = (temp > 1) ? temp : parseInt(childArr[j].rowSpan, 10);\n                if (temp > 1) {\n                    for (l = 1; l < temp; l += 1) {\n                        internalLabel[spanLen + l] = _blankString + (spanLen + l + 1);\n                    }\n                    spanTotal += (temp - 1);\n                }\n            }\n\n            // Deleting the labels for the rows/columns that the user wants to\n            // ignore.\n            for (i = 0, l = (j + spanTotal), len = ignoreArr.length; i < len; i += 1) {\n                if (ignoreArr[i] > 0) {\n                    delete internalLabel[ignoreArr[i] - 1];\n                } else {\n                    delete internalLabel[l + ignoreArr[i]];\n                }\n            }\n\n            return {'index': -1, 'labelObj': internalLabel};\n\n        } else if (index === 0) {\n            // Checking if the user has provided the index. Since we expect row/column\n            // indices starting from 1, if index is 0 then we use our internal logic\n            // to find the label array from the given nodeArr.\n            for (i = 0, l = nodeArr.length; i < l; i += 1) {\n                childArr = sanitizeNodesArray(nodeArr[i].childNodes);\n                emptyCellCount[i] = 0;\n                textCellCount = 0;\n\n                if(opts && opts._extractByHeaderTag){\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if(childArr[j].nodeName.toLowerCase() != 'th'){\n                            continue;\n                        }\n                        tLabels = getLabels(nodeArr, ignoreArr, i + 1);\n                        delete tLabels.labelObj[opts._rowLabelIndex];\n                        return tLabels;\n                    }\n                }else{\n                    for (j = 0, len = childArr.length; j < len; j += 1) {\n                        if (arrayContains(ignoreArr, (j + 1)) ||\n                                arrayContains(ignoreArr, (j - len))) {\n                            continue;\n                        }\n                        temp = getTextFromNode(childArr[j]);\n                        // Checking if the cell is emtpy.\n                        if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                            emptyCellCount[i] += 1;\n                            continue;\n                        }\n                        // Checking if the cell has a non-number content\n                        if (parseFloat(temp) != temp) {\n                            textCellCount += 1;\n                            // If there are at least 2 cells that have non-number\n                            // content then we assume that they contain labels and\n                            // fetch the labels from this array of nodes.\n                            if (textCellCount > 1) {\n                                return getLabels(nodeArr, ignoreArr, i + 1);\n                            }\n                        }\n                    }\n                }\n                // If there are empty cells then we assume that the array with\n                // the most number of empty cells must be the label array.\n                if (i > 0) {\n                    if (emptyCellCount[i - 1] > emptyCellCount[i]) {\n                        mostEmptyCellRow = i - 1;\n                    } else if (emptyCellCount[i - 1] < emptyCellCount[i]) {\n                        mostEmptyCellRow = i;\n                    }\n                }\n            }\n            if (mostEmptyCellRow !== null) {\n                return getLabels(nodeArr, ignoreArr, mostEmptyCellRow + 1);\n            } else {\n                return getLabels(nodeArr, ignoreArr);\n            }\n        }\n\n        // If this is a negative number then, calulate the index from the\n        // end of the table. e.g -1 would imply the last row.\n        if (index < 0) {\n            index += nodeArr.length;\n        } else if (index > 0) {\n            index -= 1;\n        }\n\n        /**\n         * Once we have the index of the row/column that contains the labels we\n         * go through only that row/column and extract the labels.\n         */\n        childArr = sanitizeNodesArray(nodeArr[index].childNodes);\n\n        isRowLabel = (nodeArr[0].nodeType !== undefined) ? true : false;\n        for (j = 0, len = childArr.length; j < len; j += 1) {\n            spanLength = 0;\n            if (isRowLabel) {\n                if (childArr[j].colSpan !== '1') {\n                    spanLength = parseInt(childArr[j].colSpan, 10);\n                }\n            } else if (childArr[j].rowSpan !== '1') {\n                spanLength = parseInt(childArr[j].rowSpan, 10);\n            }\n            spanLength = (spanLength > 1) ? spanLength : 0;\n            temp = getTextFromNode(childArr[j]);\n            if (temp.replace(/^\\s*/, '').replace(/\\s*$/, '') !== '') {\n                returnObj[j + totalSpanLength] = temp;\n            } else if (checkData(getColumnArr(nodeArr), j, index)) {\n                // if the label text is missing in one of the cells of the labels\n                // row/column we check for the presence of numeric data in other\n                // cells of the corresponding column/row.\n\n                returnObj[j + totalSpanLength] = _blankString + _blankNo;\n                _blankNo += 1;\n            }\n\n            if (spanLength > 1) {\n                // If the spanLength > 1, then we create additional labels for\n                // rows/columns pertaining to the rowspan or colspan.\n                temp = returnObj[j + totalSpanLength];\n                for (i = 1; i < spanLength; i += 1) {\n                    returnObj[j + totalSpanLength + i] = temp + ' (' + i + ')';\n                }\n\n                // totalSpanLength is used to adjust the indices of the\n                // subsequent cells using the rowspan/colspan of the current\n                // cell.\n                totalSpanLength += (spanLength - 1);\n            }\n        }\n\n        // Deleting the rows/columns that the user wants to ignore.\n        maxIdx = len + totalSpanLength;\n        for (i = 0, len = ignoreArr.length; i < len; i += 1) {\n            if (ignoreArr[i] > 0) {\n                delete returnObj[ignoreArr[i] - 1];\n            } else {\n                delete returnObj[maxIdx + ignoreArr[i]];\n            }\n        }\n\n        return {'labelObj': returnObj, 'index': index};\n    },\n\n    extractDataFromTable = function (tbl, opts) {\n\n        if (typeof tbl === 'string') {\n            tbl = doc.getElementById(tbl);\n        }\n\n        if ((typeof win.jQuery !== 'undefined') && (tbl instanceof win.jQuery)) { // jshint ignore: line\n            tbl = tbl.get(0);\n        }\n\n        if (!tbl) {\n            return {data: null};\n        }\n\n        if (opts.hideTable) {\n            tbl.style.display = 'none';\n        }\n\n        var i,\n            j,\n            rowCells,\n            cellText,\n            dataMap = {},\n            mapColumnIdx,\n            columnSpan,\n            len,\n            item,\n            rowSpan,\n            cellEle,\n            columnSpanObj = {},\n            rowSpanObj = {},\n            tableRows = sanitizeNodesArray(getThead(tbl)).concat(sanitizeNodesArray(getTbody(tbl).childNodes)),\n            l = tableRows.length,\n            dataRows = 0,\n            dataColumns = 0,\n            tempColumn = 0,\n            rowLabelMap,\n            m,\n            k = 0,\n            columnLabelMap,\n            isSingleSeries = false,\n            chartType = opts.chartType,\n            tempMap,\n\n            singleSeriesCharts = ['column2d', 'column3d', 'pie3d', 'pie2d',\n                'line', 'bar2d', 'area2d', 'doughnut2d',\n                'doughnut3d', 'pareto2d', 'pareto3d'];\n\n\n        if(singleSeriesCharts.indexOf(chartType) !== -1){\n            isSingleSeries = true;\n        }\n\n\n\n        // use rowLabelSource and colLabelSource to avoid confusion\n        opts.rowLabelSource = parseInt(opts.labelSource, 10);\n        opts.colLabelSource = parseInt(opts.legendSource, 10);\n        // Create the labels objects for the chart.\n\n        if (opts.major === 'column') {\n            rowLabelMap = opts.useLabels ?\n                getLabels(tableRows, opts.ignoreCols, opts.rowLabelSource) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.colLabelSource) :\n                getLabels(getColumnArr(tableRows), opts.ignoreRows);\n        }else{\n            tempMap = getLabels(getColumnArr(tableRows), opts.ignoreRows, opts.rowLabelSource);\n            if(!opts.useLabels){\n                rowLabelMap = getLabels(getColumnArr(tableRows), opts.ignoreRows);\n            }else{\n                rowLabelMap = tempMap;\n            }\n\n            opts._rowLabelIndex = tempMap.index;\n            opts._extractByHeaderTag = true;\n\n            columnLabelMap = opts.useLegend ?\n                getLabels(tableRows, opts.ignoreCols, opts.colLabelSource, opts) :\n                getLabels(tableRows, opts.ignoreCols);\n\n            delete opts._extractByHeaderTag;\n\n            tempMap = rowLabelMap;\n            rowLabelMap = columnLabelMap;\n            columnLabelMap = tempMap;\n        }\n\n        delete rowLabelMap.labelObj[columnLabelMap.index];\n        delete columnLabelMap.labelObj[rowLabelMap.index];\n\n        // Creating the 2d map depending on whether the rows are the primary\n        // keys or the columns.\n        if (opts.major === 'row') {\n            for (item in columnLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        } else {\n            for (item in rowLabelMap.labelObj) {\n                dataMap[item] = {};\n            }\n        }\n\n        // Populating the dataMap.\n        for (i = 0; i < l; i += 1) {\n            if (rowLabelMap.index === i ||\n                    (columnLabelMap.labelObj[i] === undefined)) {\n                continue;\n            }\n\n            dataRows += 1;\n            rowCells = sanitizeNodesArray(tableRows[i].childNodes);\n\n            // columnSpanObj maintains the number of colspans in the current\n            // row.\n            // rowSpanObj maintains the number of rowspans in a rows x columns\n            // map.\n            columnSpanObj[i] = 0;\n            rowSpanObj[i] = {};\n\n            for (j = 0, len = rowCells.length; j < len; j += 1) {\n\n                cellEle = rowCells[j];\n\n                columnSpan = parseInt(cellEle.getAttribute('colspan'), 10);\n                rowSpan = parseInt(cellEle.getAttribute('rowspan'), 10);\n\n                mapColumnIdx = j + columnSpanObj[i];\n\n                // Calculating the position of the current cell in the dataMap.\n                while (k < i) {\n                    if (rowSpanObj[k]) {\n                        for (m in rowSpanObj[k]) {\n                            if (m > mapColumnIdx) {\n                                break;\n                            }\n\n                            if ((i - k) <= rowSpanObj[k][m].row) {\n                                mapColumnIdx += rowSpanObj[k][m].col;\n                            }\n                        }\n                    }\n                    k += 1;\n                }\n\n                if (columnSpan > 1) {\n                    columnSpanObj[i] += (columnSpan - 1);\n                }\n\n                if (rowSpan > 1) {\n                    if (columnSpan > 1) {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: columnSpan\n                        };\n                    } else {\n                        rowSpanObj[i][mapColumnIdx] = {\n                            row: (rowSpan - 1),\n                            col: 1\n                        };\n                    }\n                }\n                if (columnLabelMap.index === mapColumnIdx ||\n                    (rowLabelMap.labelObj[mapColumnIdx] === undefined)) {\n\n                    continue;\n                }\n\n                tempColumn += 1;\n                cellText = getTextFromNode(cellEle);\n                // If the cell does not have any text then we covert it by\n                // default to 0 or to an parameterized option set by user.\n                if (cellText.replace(/^\\s*/, '').replace(/\\s*$/, '') === '') {\n                    if (opts.convertBlankTo) {\n                        cellText = opts.convertBlankTo;\n                    } else {\n                        continue;\n                    }\n                }\n\n                // Filling up the dataMap based on the rowspan, colspan and\n                // position(row=i, column=mapColumnIdx) information of the\n                // table cell.\n                columnSpan = (columnSpan > 1) ? columnSpan : 1;\n                rowSpan = (rowSpan > 1) ? rowSpan : 1;\n\n                if (opts.major === 'row') {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[i + m][mapColumnIdx + k] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n                else {\n                    k = 0;\n                    while (k < columnSpan) {\n                        m = 0;\n                        while (m < rowSpan) {\n                            dataMap[mapColumnIdx + k][i + m] = parseFloat(cellText);\n                            m += 1;\n                        }\n                        k += 1;\n                    }\n                }\n            }\n            if (tempColumn > dataColumns) {\n                dataColumns = tempColumn;\n            }\n        }\n\n        return {\n            data: dataMap,\n            chartType: chartType ? (!isSingleSeries ? 'multi' : 'single') :\n                ((dataRows > 1 && dataColumns > 1) ? 'multi' : 'single'),\n            labelMap: columnLabelMap,\n            legendMap: rowLabelMap\n        };\n    },\n\n    createChartFromTable = function (data, obj) {\n\n        // Default configuration for HTMLTable data-handler\n        var opts = {\n                chartAttributes: { },\n                major: 'row',\n                useLabels: true,\n                useLegend: true,\n                labelSource: 0,\n                legendSource: 0,\n                ignoreCols: [],\n                ignoreRows: [],\n                showLabels: true,\n                showLegend: true,\n                seriesColors: [],\n                convertBlankTo: '0',\n                hideTable: false,\n                chartType: obj.chartType && obj.chartType(),\n\n                // Private Variables\n                labels: [],\n                legend: [],\n                data: []\n            }, config = obj.args.dataConfiguration || {},\n            i, item1, item2, categoryArr, datasetArr, chartJSON = {},\n            datasets = {}, dataObj, dataMap, labelMap, legendMap;\n\n        extend(opts, config);\n\n        dataObj = extractDataFromTable(data, opts);\n        dataMap = dataObj.data;\n\n        if (opts.major !== 'row') {\n            labelMap = dataObj.legendMap,\n            legendMap = dataObj.labelMap;\n        } else {\n            labelMap = dataObj.labelMap,\n            legendMap = dataObj.legendMap;\n        }\n\n        // chartAttributes should contain the configuration attributes for the chart\n        // e.g caption, xAxisName, yAxisName etc.\n        chartJSON.chart = extend({}, opts.chartAttributes);\n\n        if (dataObj.chartType === 'multi') {\n            chartJSON.categories = [{'category': []}];\n            chartJSON.dataset = [];\n\n            categoryArr = chartJSON.categories[0].category;\n            datasetArr = chartJSON.dataset;\n\n            i = 0;\n            for (item1 in dataMap) {\n\n                if (opts.showLabels === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    categoryArr.push(extend({\n                        label: (labelMap.labelObj[item1].indexOf(_blankString) != -1) ?\n                            '' : labelMap.labelObj[item1]\n                    },\n                    opts.labels[i]));\n                } else {\n                    categoryArr.push({'label': ''});\n                }\n                i += 1;\n                for (item2 in dataMap[item1]) {\n                    if (typeof datasets[item2] === 'undefined') {\n                        datasets[item2] = [];\n                    }\n                    datasets[item2].push({'value': dataMap[item1][item2]});\n                }\n            }\n\n            i = 0;\n            for (item1 in datasets) {\n                if (opts.showLegend === true) {\n                    // If the user has provided custom labels then those should be\n                    // shown instead of the extracted labels.\n                    datasetArr.push(extend({\n                        'seriesname': ((legendMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : legendMap.labelObj[item1]),\n                        'data': datasets[item1]\n                    }, opts.legend[i]));\n                } else {\n                    datasetArr.push({\n                        'seriesname': '',\n                        'data': datasets[item1]\n                    });\n                }\n                i += 1;\n            }\n        } else if (dataObj.chartType === 'single') {\n            chartJSON.data = [];\n            datasetArr = chartJSON.data;\n\n            i = 0;\n            if (opts.showLabels) {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push(extend({\n                            label: ((labelMap.labelObj[item1].indexOf(_blankString) !== -1) ?\n                            '' : labelMap.labelObj[item1]),\n                            value: dataMap[item1][item2]\n                        }, opts.labels[i]));\n\n                        i += 1;\n                    }\n                }\n            } else {\n                for (item1 in dataMap) {\n                    for (item2 in dataMap[item1]) {\n                        datasetArr.push({'value': dataMap[item1][item2]});\n                    }\n                }\n            }\n        }\n\n        return {\n            data: chartJSON,\n            error: undefined\n        };\n    },\n    htmlTableToJSON = function (data, obj) {\n        return createChartFromTable(data, obj);\n    };\n\n/**\n * method to set the HTML table data\n * @param {Object} dom: HTML table dom\n */\nfunction setHTMLTableData (dom) {\n    this.setChartData(dom, 'htmltable');\n}\n/**\n * method to add functions in the fusioncharts prototype\n * @param {Function} FusionCharts is required\n * @return {Object} for extension\n */\nfunction wrapper (FusionCharts) {\n    FusionCharts && (FusionCharts.prototype.setHTMLTableData = setHTMLTableData);\n    return {\n        format: 'htmltable',\n        toJSON: htmlTableToJSON\n    };\n}\n\nmodule.exports = {\n    extension: wrapper,\n    name: 'HTMLTable',\n    type: 'transcoder',\n    requiresFusionCharts: true\n};\n"],"sourceRoot":""}