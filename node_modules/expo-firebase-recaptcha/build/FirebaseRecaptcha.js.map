{"version":3,"file":"FirebaseRecaptcha.js","sourceRoot":"","sources":["../src/FirebaseRecaptcha.tsx"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_WEB_APP_OPTIONS, FirebaseOptions } from 'expo-firebase-core';\nimport { CodedError } from 'expo-modules-core';\nimport * as React from 'react';\n\nimport { WebView } from './WebView';\n\ninterface Props extends React.ComponentProps<typeof WebView> {\n  firebaseConfig?: FirebaseOptions;\n  firebaseVersion?: string;\n  appVerificationDisabledForTesting?: boolean;\n  languageCode?: string;\n  onLoad?: () => any;\n  onError?: () => any;\n  onVerify: (token: string) => any;\n  onFullChallenge?: () => any;\n  invisible?: boolean;\n  verify?: boolean;\n}\n\nfunction getWebviewSource(\n  firebaseConfig: FirebaseOptions,\n  firebaseVersion?: string,\n  appVerificationDisabledForTesting: boolean = false,\n  languageCode?: string,\n  invisible?: boolean\n) {\n  firebaseVersion = firebaseVersion || '8.0.0';\n  return {\n    baseUrl: `https://${firebaseConfig.authDomain}`,\n    html: `\n<!DOCTYPE html><html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"HandheldFriendly\" content=\"true\">\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-app.js\"></script>\n  <script src=\"https://www.gstatic.com/firebasejs/${firebaseVersion}/firebase-auth.js\"></script>\n  <script type=\"text/javascript\">firebase.initializeApp(${JSON.stringify(firebaseConfig)});</script>\n  <style>\n    html, body {\n      height: 100%;\n      ${invisible ? `padding: 0; margin: 0;` : ``}\n    }\n    #recaptcha-btn {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      border: 0;\n      user-select: none;\n      -webkit-user-select: none;\n    }\n  </style>\n</head>\n<body>\n  ${\n    invisible\n      ? `<button id=\"recaptcha-btn\" type=\"button\" onclick=\"onClickButton()\">Confirm reCAPTCHA</button>`\n      : `<div id=\"recaptcha-cont\" class=\"g-recaptcha\"></div>`\n  }\n  <script>\n    var fullChallengeTimer;\n    function onVerify(token) {\n      if (fullChallengeTimer) {\n        clearInterval(fullChallengeTimer);\n        fullChallengeTimer = undefined;\n      }\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'verify',\n        token: token\n      }));\n    }\n    function onLoad() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'load'\n      }));\n      firebase.auth().settings.appVerificationDisabledForTesting = ${appVerificationDisabledForTesting};\n      ${languageCode ? `firebase.auth().languageCode = '${languageCode}';` : ''}\n      window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier(\"${\n        invisible ? 'recaptcha-btn' : 'recaptcha-cont'\n      }\", {\n        size: \"${invisible ? 'invisible' : 'normal'}\",\n        callback: onVerify\n      });\n      window.recaptchaVerifier.render();\n    }\n    function onError() {\n      window.ReactNativeWebView.postMessage(JSON.stringify({\n        type: 'error'\n      }));\n    }\n    function onClickButton() {\n      if (!fullChallengeTimer) {\n        fullChallengeTimer = setInterval(function() {\n          var iframes = document.getElementsByTagName(\"iframe\");\n          var isFullChallenge = false;\n          for (i = 0; i < iframes.length; i++) {\n            var parentWindow = iframes[i].parentNode ? iframes[i].parentNode.parentNode : undefined;\n            var isHidden = parentWindow && parentWindow.style.opacity == 0;\n            isFullChallenge = isFullChallenge || (\n              !isHidden && \n              ((iframes[i].title === 'recaptcha challenge') ||\n               (iframes[i].src.indexOf('google.com/recaptcha/api2/bframe') >= 0)));\n          }\n          if (isFullChallenge) {\n            clearInterval(fullChallengeTimer);\n            fullChallengeTimer = undefined;\n            window.ReactNativeWebView.postMessage(JSON.stringify({\n              type: 'fullChallenge'\n            }));  \n          }\n        }, 100);\n      }\n    }\n    window.addEventListener('message', function(event) {\n      if (event.data.verify) {\n        document.getElementById('recaptcha-btn').click();\n      }\n    });\n  </script>\n  <script src=\"https://www.google.com/recaptcha/api.js?onload=onLoad&render=explicit&hl=${\n    languageCode ?? ''\n  }\" onerror=\"onError()\"></script>\n</body></html>`,\n  };\n}\n\nfunction validateFirebaseConfig(firebaseConfig?: FirebaseOptions) {\n  if (!firebaseConfig) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n  }\n  const { authDomain } = firebaseConfig;\n  if (!authDomain) {\n    throw new CodedError(\n      'ERR_FIREBASE_RECAPTCHA_CONFIG',\n      `Missing \"authDomain\" in firebase web configuration.`\n    );\n  }\n}\n\nexport default function FirebaseRecaptcha(props: Props) {\n  const {\n    firebaseConfig,\n    firebaseVersion,\n    appVerificationDisabledForTesting,\n    languageCode,\n    onVerify,\n    onLoad,\n    onError,\n    onFullChallenge,\n    invisible,\n    verify,\n    ...otherProps\n  } = props;\n  const webview = React.useRef(null);\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    if (webview.current && loaded && verify) {\n      // @ts-ignore: Object is possibly null\n      webview.current.injectJavaScript(`\n    (function(){\n      window.dispatchEvent(new MessageEvent('message', {data: { verify: true }}));\n    })();\n    true;\n    `);\n    }\n    return () => {};\n  }, [webview, verify, loaded]);\n  validateFirebaseConfig(firebaseConfig);\n  if (!firebaseConfig) {\n    console.error(\n      `FirebaseRecaptcha: Missing firebase web configuration. Please set the \"expo.web.config.firebase\" field in \"app.json\" or use the \"firebaseConfig\" prop.`\n    );\n    return null;\n  }\n  return (\n    <WebView\n      ref={webview}\n      javaScriptEnabled\n      automaticallyAdjustContentInsets\n      scalesPageToFit\n      mixedContentMode=\"always\"\n      source={getWebviewSource(\n        firebaseConfig,\n        firebaseVersion,\n        appVerificationDisabledForTesting,\n        languageCode,\n        invisible\n      )}\n      onError={onError}\n      onMessage={(event) => {\n        const data = JSON.parse(event.nativeEvent.data);\n        switch (data.type) {\n          case 'load':\n            if (onLoad) {\n              setLoaded(true);\n              onLoad();\n            }\n            break;\n          case 'error':\n            if (onError) {\n              onError();\n            }\n            break;\n          case 'verify':\n            onVerify(data.token);\n            break;\n          case 'fullChallenge':\n            if (onFullChallenge) {\n              onFullChallenge();\n            }\n            break;\n        }\n      }}\n      {...otherProps}\n    />\n  );\n}\n\nFirebaseRecaptcha.defaultProps = {\n  firebaseConfig: DEFAULT_WEB_APP_OPTIONS,\n};\n"]}